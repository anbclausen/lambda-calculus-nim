/* Generated by the Nim Compiler v1.4.2 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI12741020 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12741019 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12741018 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI2235020 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1194621 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194643 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194645 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI12741024 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI2151056 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI12741051 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12741048 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12741045 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12920039 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12660653 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12900246 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12855535 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12885234 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12855532 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI1188044 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI5890232 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI6145011 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12940033 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12940032 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12990106 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI1194651 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI12855527 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI12622016 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI12622025 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI12622018 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI12660661 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI1194641 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194649 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1188011 = {size: 0,kind: 2,base: null,node: null,finalizer: null};
var NTI12622048 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI1194653 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194635 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194408 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194728 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI1188013 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI1188015 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI1194723 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI1194617 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194619 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194633 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194637 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI1194637 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194637.node = NNI1194637;
var NNI1194633 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194633.node = NNI1194633;
var NNI1194619 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194619.node = NNI1194619;
NTI1194723.base = NTI1194617;
NTI1194728.base = NTI1194617;
var NNI1194617 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI1194723, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI1188015, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI1188013, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI1188013, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI1194728, name: "up", sons: null}]};
NTI1194617.node = NNI1194617;
var NNI1194408 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194408.node = NNI1194408;
NTI1194617.base = NTI1194408;
NTI1194619.base = NTI1194617;
NTI1194633.base = NTI1194619;
NTI1194637.base = NTI1194633;
var NNI1194635 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194635.node = NNI1194635;
NTI1194635.base = NTI1194633;
var NNI1194653 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194653.node = NNI1194653;
NTI1194653.base = NTI1194619;
NTI12622048.base = NTI1188011;
var NNI1194649 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194649.node = NNI1194649;
NTI1194649.base = NTI1194619;
var NNI1194641 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194641.node = NNI1194641;
NTI1194641.base = NTI1194619;
var NNI12622016 = {kind: 2, offset: 0, typ: null, name: null, len: 6, sons: {"0": {kind: 1, offset: 0, typ: NTI12622016, name: "LAMBDA", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI12622016, name: "DOT", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI12622016, name: "LPAREN", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI12622016, name: "RPAREN", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI12622016, name: "ID", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI12622016, name: "DEFAS", len: 0, sons: null}}};
NTI12622016.node = NNI12622016;
var NNI12622025 = {kind: 3, offset: "ttype", len: 6, typ: NTI12622016, name: "ttype", sons: [[setConstr(4), {kind: 1, offset: "name", len: 0, typ: NTI1188015, name: "name", sons: null}], 
[setConstr(6), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}]]};
NTI12622025.node = NNI12622025;
NTI12622018.base = NTI12622025;
NTI12660661.base = NTI12622018;
NTI12855527.base = NTI12622018;
var NNI1194651 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194651.node = NNI1194651;
NTI1194651.base = NTI1194619;
NTI12990106.base = NTI12622018;
NTI12940033.base = NTI12622018;
NTI12940032.base = NTI12940033;
var NNI6145011 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI5890232, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI1188044, name: "b", sons: null}]};
NTI6145011.node = NNI6145011;
NTI12855532.base = NTI12622018;
NTI12855535.base = NTI12622018;
NTI12885234.base = NTI12855535;
NTI12660653.base = NTI12622018;
NTI12900246.base = NTI12660653;
NTI12920039.base = NTI12660653;
var NNI12741051 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI2151056, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI12622016, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI12741024, name: "Field2", sons: null}]};
NTI12741051.node = NNI12741051;
NTI12741048.base = NTI12741051;
var NNI12741045 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI12741048, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI1188044, name: "counter", sons: null}]};
NTI12741045.node = NNI12741045;
var NNI1194645 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194645.node = NNI1194645;
var NNI1194643 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194643.node = NNI1194643;
var NNI1194621 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194621.node = NNI1194621;
NTI1194621.base = NTI1194617;
NTI1194643.base = NTI1194621;
NTI1194645.base = NTI1194643;
var NNI2235020 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI1188044, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI1188044, name: "b", sons: null}]};
NTI2235020.node = NNI2235020;
NTI12741019.base = NTI12622018;
NTI12741020.base = NTI12622018;
var NNI12741018 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI12741019, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI12741020, name: "Field1", sons: null}]};
NTI12741018.node = NNI12741018;
function makeNimstrLit(c_1455062) {
      var ln = c_1455062.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_1455062.charCodeAt(i);
  }
  return result;
  

  
}
function toJSStr(s_1455096) {
                    var Tmp5;
            var Tmp7;

  var result_1455097 = null;

    var res_1455170 = newSeq_1455128((s_1455096).length);
    var i_1455172 = 0;
    var j_1455174 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_1455172 < (s_1455096).length)) break L2;
          var c_1455175 = s_1455096[i_1455172];
          if ((c_1455175 < 128)) {
          res_1455170[j_1455174] = String.fromCharCode(c_1455175);
          i_1455172 += 1;
          }
          else {
            var helper_1455198 = newSeq_1455128(0);
            L3: do {
                L4: while (true) {
                if (!true) break L4;
                  var code_1455199 = c_1455175.toString(16);
                  if (((code_1455199).length == 1)) {
                  helper_1455198.push("%0");;
                  }
                  else {
                  helper_1455198.push("%");;
                  }
                  
                  helper_1455198.push(code_1455199);;
                  i_1455172 += 1;
                    if (((s_1455096).length <= i_1455172)) Tmp5 = true; else {                      Tmp5 = (s_1455096[i_1455172] < 128);                    }                  if (Tmp5) {
                  break L3;
                  }
                  
                  c_1455175 = s_1455096[i_1455172];
                }
            } while(false);
++excHandler;
            Tmp7 = framePtr;
            try {
            res_1455170[j_1455174] = decodeURIComponent(helper_1455198.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
            framePtr = Tmp7;
            res_1455170[j_1455174] = helper_1455198.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Tmp7;
            }
          }
          
          j_1455174 += 1;
        }
    } while(false);
    if (res_1455170.length < j_1455174) { for (var i=res_1455170.length;i<j_1455174;++i) res_1455170.push(null); }
               else { res_1455170.length = j_1455174; };
    result_1455097 = res_1455170.join("");

  return result_1455097;

}
function raiseException(e_1420218, ename_1420219) {
    e_1420218.name = ename_1420219;
    if ((excHandler == 0)) {
    unhandledException(e_1420218);
    }
    
    throw e_1420218;

  
}
function addInt(a_1460419, b_1460420) {
        var result = a_1460419 + b_1460420;
    checkOverflowInt(result);
    return result;
  

  
}
function divInt(a_1460473, b_1460474) {
        if (b_1460474 == 0) raiseDivByZero();
    if (b_1460474 == -1 && a_1460473 == 2147483647) raiseOverflow();
    return Math.trunc(a_1460473 / b_1460474);
  

  
}
function mulInt(a_1460455, b_1460456) {
        var result = a_1460455 * b_1460456;
    checkOverflowInt(result);
    return result;
  

  
}
function chckRange(i_1485016, a_1485017, b_1485018) {
      var Tmp1;

  var result_1485019 = 0;

  BeforeRet: do {
      if (!(a_1485017 <= i_1485016)) Tmp1 = false; else {        Tmp1 = (i_1485016 <= b_1485018);      }    if (Tmp1) {
    result_1485019 = i_1485016;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_1485019;

}
function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);
function nimCopy(dest_1470023, src_1470024, ti_1470025) {
  var result_1475219 = null;

    switch (ti_1470025.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_1465401(ti_1470025))) {
      result_1475219 = src_1470024;
      }
      else {
        result_1475219 = [src_1470024[0], src_1470024[1]];
      }
      
      break;
    case 19:
            if (dest_1470023 === null || dest_1470023 === undefined) {
        dest_1470023 = {};
      }
      else {
        for (var key in dest_1470023) { delete dest_1470023[key]; }
      }
      for (var key in src_1470024) { dest_1470023[key] = src_1470024[key]; }
      result_1475219 = dest_1470023;
    
      break;
    case 18:
    case 17:
      if (!((ti_1470025.base == null))) {
      result_1475219 = nimCopy(dest_1470023, src_1470024, ti_1470025.base);
      }
      else {
      if ((ti_1470025.kind == 17)) {
      result_1475219 = (dest_1470023 === null || dest_1470023 === undefined) ? {m_type: ti_1470025} : dest_1470023;
      }
      else {
        result_1475219 = (dest_1470023 === null || dest_1470023 === undefined) ? {} : dest_1470023;
      }
      }
      nimCopyAux(result_1475219, src_1470024, ti_1470025.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_1470024 === null) {
        result_1475219 = null;
      }
      else {
        if (dest_1470023 === null || dest_1470023 === undefined) {
          dest_1470023 = new Array(src_1470024.length);
        }
        else {
          dest_1470023.length = src_1470024.length;
        }
        result_1475219 = dest_1470023;
        for (var i = 0; i < src_1470024.length; ++i) {
          result_1475219[i] = nimCopy(result_1475219[i], src_1470024[i], ti_1470025.base);
        }
      }
    
      break;
    case 28:
            if (src_1470024 !== null) {
        result_1475219 = src_1470024.slice(0);
      }
    
      break;
    default: 
      result_1475219 = src_1470024;
      break;
    }

  return result_1475219;

}
var ConstSet2 = setConstr([0, 0]);
function cstrToNimstr(c_1455079) {
      var ln = c_1455079.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_1455079.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_1455079.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}
function chckIndx(i_1480086, a_1480087, b_1480088) {
      var Tmp1;

  var result_1480089 = 0;

  BeforeRet: do {
      if (!(a_1480087 <= i_1480086)) Tmp1 = false; else {        Tmp1 = (i_1480086 <= b_1480088);      }    if (Tmp1) {
    result_1480089 = i_1480086;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_1480086, a_1480087, b_1480088);
    }
    
  } while (false);

  return result_1480089;

}
function subInt(a_1460437, b_1460438) {
        var result = a_1460437 - b_1460438;
    checkOverflowInt(result);
    return result;
  

  
}
var ConstSet3 = setConstr(4);
function raiseFieldError(f_1450047) {
    raiseException({message: nimCopy(null, f_1450047, NTI1188013), parent: null, m_type: NTI1194651, name: null, trace: [], up: null}, "FieldDefect");

  
}
var ConstSet4 = setConstr(4);
var ConstSet5 = setConstr([1, 1]);
var ConstSet6 = setConstr(4);
var ConstSet7 = setConstr(4);
var ConstSet8 = setConstr([1, 1]);
var ConstSet9 = setConstr([0, 0]);
var ConstSet10 = setConstr([1, 1]);
var ConstSet11 = setConstr(4);
var ConstSet12 = setConstr(4);
function reprEnum(e_1545272, typ_1545273) {
  var result_1545274 = [];

    var tmp_1545275 = false;
    var item_1545276 = typ_1545273.node.sons[e_1545272];
    tmp_1545275 = item_1545276 !== undefined
    if (tmp_1545275) {
    result_1545274 = nimCopy(null, makeNimstrLit(item_1545276.name), NTI1188013);
    }
    else {
      result_1545274 = nimCopy(null, (cstrToNimstr((e_1545272)+"") || []).concat(makeNimstrLit(" (invalid data!)") || []), NTI1188013);
    }
    

  return result_1545274;

}
function modInt(a_1460491, b_1460492) {
        if (b_1460492 == 0) raiseDivByZero();
    if (b_1460492 == -1 && a_1460491 == 2147483647) raiseOverflow();
    return Math.trunc(a_1460491 % b_1460492);
  

  
}
var ConstSet13 = setConstr(3);
var ConstSet14 = setConstr(0);
var ConstSet15 = setConstr(1);
var ConstSet16 = setConstr(1);
var ConstSet17 = setConstr(2);
var ConstSet18 = setConstr(2);
var ConstSet19 = setConstr(3);
var ConstSet20 = setConstr(0);
var ConstSet21 = setConstr(1);
var ConstSet22 = setConstr(1);
var ConstSet23 = setConstr(1);
var ConstSet24 = setConstr(1);
var ConstSet25 = setConstr(1);
var ConstSet26 = setConstr(1);
var ConstSet27 = setConstr(1);
var ConstSet28 = setConstr(1);
var ConstSet29 = setConstr(2);
var ConstSet30 = setConstr(2);
var ConstSet31 = setConstr(2);
var ConstSet32 = setConstr(2);
var ConstSet33 = setConstr(1);
var ConstSet34 = setConstr(2);
var ConstSet35 = setConstr(1);
var ConstSet36 = setConstr(2);
var ConstSet37 = setConstr(2);
var ConstSet38 = setConstr(0);
var ConstSet39 = setConstr(1);
var ConstSet40 = setConstr(1);
var ConstSet41 = setConstr(0);
var ConstSet42 = setConstr(1);
var ConstSet43 = setConstr(1);
var ConstSet44 = setConstr(0);
var ConstSet45 = setConstr(2);
var ConstSet46 = setConstr(2);
var ConstSet47 = setConstr(2);
var ConstSet48 = setConstr(2);
var ConstSet49 = setConstr(2);
var ConstSet50 = setConstr(2);
var ConstSet51 = setConstr(0);
function mnewString(len_1460044) {
        return new Array(len_1460044);
  

  
}
var ConstSet52 = setConstr(1);
var ConstSet53 = setConstr(1);
var ConstSet54 = setConstr(2);
var ConstSet55 = setConstr(2);
var ConstSet56 = setConstr(3);
var ConstSet57 = setConstr(3);
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var objectID_2155031 = [0];
function nextPowerOfTwo_2430014(x_2430016) {
  var result_2430017 = 0;

    result_2430017 = (x_2430016 - 1);
    result_2430017 = (result_2430017 | (result_2430017 >> 16));
    result_2430017 = (result_2430017 | (result_2430017 >> 8));
    result_2430017 = (result_2430017 | (result_2430017 >> 4));
    result_2430017 = (result_2430017 | (result_2430017 >> 2));
    result_2430017 = (result_2430017 | (result_2430017 >> 1));
    result_2430017 += (1 + ((x_2430016 <= 0) ? 1:0));

  return result_2430017;

}
function add_1357211(x_1357214, x_1357214_Idx, y_1357215) {
          if (x_1357214[x_1357214_Idx] === null) { x_1357214[x_1357214_Idx] = []; }
      var off = x_1357214[x_1357214_Idx].length;
      x_1357214[x_1357214_Idx].length += y_1357215.length;
      for (var i = 0; i < y_1357215.length; ++i) {
        x_1357214[x_1357214_Idx][off+i] = y_1357215.charCodeAt(i);
      }
    

  
}
function newSeq_1455128(len_1455131) {
  var result_1455133 = [];

    result_1455133 = new Array(len_1455131); for (var i=0;i<len_1455131;++i) {result_1455133[i]=null;}
  return result_1455133;

}
function unhandledException(e_1415059) {
    var buf_1415060 = [[]];
    if (!(((e_1415059.message).length == 0))) {
    buf_1415060[0].push.apply(buf_1415060[0], makeNimstrLit("Error: unhandled exception: "));;
    buf_1415060[0].push.apply(buf_1415060[0], e_1415059.message);;
    }
    else {
    buf_1415060[0].push.apply(buf_1415060[0], makeNimstrLit("Error: unhandled exception"));;
    }
    
    buf_1415060[0].push.apply(buf_1415060[0], makeNimstrLit(" ["));;
    add_1357211(buf_1415060, 0, e_1415059.name);
    buf_1415060[0].push.apply(buf_1415060[0], makeNimstrLit("]\x0A"));;
    var cbuf_1420201 = toJSStr(buf_1415060[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_1420201);
  }
  else {
    throw cbuf_1420201;
  }
  

  
}
function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI1194637, name: null, trace: [], up: null}, "OverflowDefect");

  
}
function checkOverflowInt(a_1460403) {
        if (a_1460403 > 2147483647 || a_1460403 < -2147483648) raiseOverflow();
  

  
}
function raiseDivByZero() {
    raiseException({message: makeNimstrLit("division by zero"), parent: null, m_type: NTI1194635, name: null, trace: [], up: null}, "DivByZeroDefect");

  
}
function slotsNeeded_2465048(count_2465050) {
  var result_2465051 = 0;

    result_2465051 = nextPowerOfTwo_2430014(addInt(divInt(mulInt(count_2465050, 3), 2), 4));

  return result_2465051;

}
function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI1194653, name: null, trace: [], up: null}, "RangeDefect");

  
}
function initTable_13136017(initialSize_13136021) {
  var result_13136037 = ({data: [], counter: 0});

    var correctSizeHEX60gensym0_13140001 = slotsNeeded_2465048(chckRange(initialSize_13136021, 0, 2147483647));
    result_13136037.counter = 0;
    result_13136037.data = new Array(chckRange(correctSizeHEX60gensym0_13140001, 0, 2147483647)); for (var i=0;i<chckRange(correctSizeHEX60gensym0_13140001, 0, 2147483647);++i) {result_13136037.data[i]={Field0: 0, Field1: null, Field2: null};}
  return result_13136037;

}
var store_13145629 = [initTable_13136017(32)];
function isFatPointer_1465401(ti_1465403) {
  var result_1465404 = false;

  BeforeRet: do {
    result_1465404 = !((ConstSet1[ti_1465403.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_1465404;

}
function nimCopyAux(dest_1470028, src_1470029, n_1470031) {
    switch (n_1470031.kind) {
    case 0:
      break;
    case 1:
            dest_1470028[n_1470031.offset] = nimCopy(dest_1470028[n_1470031.offset], src_1470029[n_1470031.offset], n_1470031.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_1470031.sons.length; i++) {
      nimCopyAux(dest_1470028, src_1470029, n_1470031.sons[i]);
    }
    
      break;
    case 3:
            dest_1470028[n_1470031.offset] = nimCopy(dest_1470028[n_1470031.offset], src_1470029[n_1470031.offset], n_1470031.typ);
      for (var i = 0; i < n_1470031.sons.length; ++i) {
        nimCopyAux(dest_1470028, src_1470029, n_1470031.sons[i][1]);
      }
    
      break;
    }

  
}
function raiseIndexError(i_1440047, a_1440048, b_1440049) {
    var Tmp1;

    if ((b_1440049 < a_1440048)) {
    Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_1440047)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_1440048)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_1440049)+"") || []);
    }
    
    raiseException({message: nimCopy(null, Tmp1, NTI1188013), parent: null, m_type: NTI1194649, name: null, trace: [], up: null}, "IndexDefect");

  
}
function sysFatal_1305418(message_1305422) {
    raiseException({message: nimCopy(null, message_1305422, NTI1188013), m_type: NTI1194641, parent: null, name: null, trace: [], up: null}, "AssertionDefect");

  
}
function raiseAssert_1305414(msg_1305416) {
    sysFatal_1305418(msg_1305416);

  
}
function failedAssertImpl_1305480(msg_1305482) {
    raiseAssert_1305414(msg_1305482);

  
}
function HEX26_12660654(x_12660658, y_12660660) {
  var result_12660662 = [];

    result_12660662 = new Array(chckRange(addInt((x_12660658).length, (y_12660660).length), 0, 2147483647)); for (var i=0;i<chckRange(addInt((x_12660658).length, (y_12660660).length), 0, 2147483647);++i) {result_12660662[i]=null;}    L1: do {
      var i_12660693 = 0;
      var colontmp__13380517 = 0;
      colontmp__13380517 = subInt((x_12660658).length, 1);
      var res_13380518 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_13380518 <= colontmp__13380517)) break L3;
            i_12660693 = res_13380518;
            result_12660662[chckIndx(i_12660693, 0, (result_12660662).length-1)] = x_12660658[chckIndx(i_12660693, 0, (x_12660658).length-1)];
            res_13380518 = addInt(res_13380518, 1);
          }
      } while(false);
    } while(false);
    L4: do {
      var i_12660707 = 0;
      var colontmp__13380524 = 0;
      colontmp__13380524 = subInt((y_12660660).length, 1);
      var res_13380525 = 0;
      L5: do {
          L6: while (true) {
          if (!(res_13380525 <= colontmp__13380524)) break L6;
            i_12660707 = res_13380525;
            result_12660662[chckIndx(addInt(i_12660707, (x_12660658).length), 0, (result_12660662).length-1)] = y_12660660[chckIndx(i_12660707, 0, (y_12660660).length-1)];
            res_13380525 = addInt(res_13380525, 1);
          }
      } while(false);
    } while(false);

  return result_12660662;

}
function baseToken_12622029(c_12622031) {
  var result_12622032 = false;

    result_12622032 = ((((((c_12622031 == 124) || (c_12622031 == 46)) || (c_12622031 == 40)) || (c_12622031 == 41)) || (c_12622031 == 32)) || (c_12622031 == 58));

  return result_12622032;

}
function HEX26_12735646(x_12735649, y_12735651) {
  var result_12735653 = [];

    result_12735653 = new Array(chckRange(addInt((y_12735651).length, 1), 0, 2147483647)); for (var i=0;i<chckRange(addInt((y_12735651).length, 1), 0, 2147483647);++i) {result_12735653[i]=null;}    result_12735653[chckIndx(0, 0, (result_12735653).length-1)] = x_12735649;
    L1: do {
      var i_12735679 = 0;
      var colontmp__13380531 = 0;
      colontmp__13380531 = subInt((y_12735651).length, 1);
      var res_13380532 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_13380532 <= colontmp__13380531)) break L3;
            i_12735679 = res_13380532;
            result_12735653[chckIndx(addInt(i_12735679, 1), 0, (result_12735653).length-1)] = y_12735651[chckIndx(i_12735679, 0, (y_12735651).length-1)];
            res_13380532 = addInt(res_13380532, 1);
          }
      } while(false);
    } while(false);

  return result_12735653;

}
function tokenize_12622046(source_12622049) {
      var Tmp2;
                          var Tmp15;
                          var Tmp23;
                          var Tmp31;
                          var Tmp39;
                          var Tmp47;
                          var Tmp55;
                      var Tmp61;
                        var Tmp63;

  var result_12622051 = [];

    L1: do {
      var expr_12622078 = nimCopy(null, source_12622049, NTI12622048);
      var pos_12622449 = 0;
      var _ = pos_12622449;
        var matched_12622247 = false;
        L3: do {
          var pos_12622246 = 0;
          var counter_12622302 = 0;
          if (!((ConstSet2[chckRange((expr_12622078).length, 0, 65535)] != undefined))) {
          break L3;
          }
          
          L4: do {
            L5: do {
              var elemId_12622303 = null;
              var elemId_12622303_Idx = 0;
              var i_13380453 = 0;
              var L_13380454 = (expr_12622078).length;
              L6: do {
                  L7: while (true) {
                  if (!(i_13380453 < L_13380454)) break L7;
                    elemId_12622303 = expr_12622078; elemId_12622303_Idx = chckIndx(i_13380453, 0, (expr_12622078).length-1);
                    pos_12622246 = addInt(pos_12622246, 1);
                    i_13380453 = addInt(i_13380453, 1);
                    if (!(((expr_12622078).length == L_13380454))) {
                    failedAssertImpl_1305480(makeNimstrLit("iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                    }
                    
                  }
              } while(false);
            } while(false);
          } while(false);
          matched_12622247 = true;
        } while(false);
      if (matched_12622247) {
      Tmp2 = [];
      }
      else {
        var tail_12660212 = [];
        var matched_12622397 = false;
        L8: do {
          var pos_12622396 = 0;
          var counter_12622398 = 0;
          if (((expr_12622078).length < 1)) {
          break L8;
          }
          
          L9: do {
            L10: do {
              var elemId_12622399 = null;
              var elemId_12622399_Idx = 0;
              var i_13380459 = 0;
              var L_13380460 = (expr_12622078).length;
              L11: do {
                  L12: while (true) {
                  if (!(i_13380459 < L_13380460)) break L12;
                    elemId_12622399 = expr_12622078; elemId_12622399_Idx = chckIndx(i_13380459, 0, (expr_12622078).length-1);
                    L13: do {
                      if ((counter_12622398 == 0)) {
                      if ((elemId_12622399[elemId_12622399_Idx] == 124)) {
                      counter_12622398 = addInt(counter_12622398, 1);
                      pos_12622396 = addInt(pos_12622396, 1);
                      break L13;
                      }
                      else {
                        break L8;
                      }
                      
                      }
                      
                      if ((counter_12622398 == 1)) {
                      L14: do {
                          if (!true) Tmp15 = false; else {                            tail_12660212.push(elemId_12622399[elemId_12622399_Idx]);;
                            Tmp15 = true;                          }                        if (Tmp15) {
                        }
                        else {
                          break L8;
                        }
                        
                      } while(false);
                      }
                      
                      pos_12622396 = addInt(pos_12622396, 1);
                    } while(false);
                    i_13380459 = addInt(i_13380459, 1);
                    if (!(((expr_12622078).length == L_13380460))) {
                    failedAssertImpl_1305480(makeNimstrLit("iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                    }
                    
                  }
              } while(false);
            } while(false);
          } while(false);
          matched_12622397 = true;
        } while(false);
      if (matched_12622397) {
      Tmp2 = HEX26_12660654([{ttype: 0, name: null}], tokenize_12622046(tail_12660212));
      }
      else {
        var tail_12670212 = [];
        var matched_12622412 = false;
        L16: do {
          var pos_12622411 = 0;
          var counter_12622413 = 0;
          if (((expr_12622078).length < 1)) {
          break L16;
          }
          
          L17: do {
            L18: do {
              var elemId_12622414 = null;
              var elemId_12622414_Idx = 0;
              var i_13380466 = 0;
              var L_13380467 = (expr_12622078).length;
              L19: do {
                  L20: while (true) {
                  if (!(i_13380466 < L_13380467)) break L20;
                    elemId_12622414 = expr_12622078; elemId_12622414_Idx = chckIndx(i_13380466, 0, (expr_12622078).length-1);
                    L21: do {
                      if ((counter_12622413 == 0)) {
                      if ((elemId_12622414[elemId_12622414_Idx] == 46)) {
                      counter_12622413 = addInt(counter_12622413, 1);
                      pos_12622411 = addInt(pos_12622411, 1);
                      break L21;
                      }
                      else {
                        break L16;
                      }
                      
                      }
                      
                      if ((counter_12622413 == 1)) {
                      L22: do {
                          if (!true) Tmp23 = false; else {                            tail_12670212.push(elemId_12622414[elemId_12622414_Idx]);;
                            Tmp23 = true;                          }                        if (Tmp23) {
                        }
                        else {
                          break L16;
                        }
                        
                      } while(false);
                      }
                      
                      pos_12622411 = addInt(pos_12622411, 1);
                    } while(false);
                    i_13380466 = addInt(i_13380466, 1);
                    if (!(((expr_12622078).length == L_13380467))) {
                    failedAssertImpl_1305480(makeNimstrLit("iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                    }
                    
                  }
              } while(false);
            } while(false);
          } while(false);
          matched_12622412 = true;
        } while(false);
      if (matched_12622412) {
      Tmp2 = HEX26_12660654([{ttype: 1, name: null}], tokenize_12622046(tail_12670212));
      }
      else {
        var tail_12680212 = [];
        var matched_12622418 = false;
        L24: do {
          var pos_12622417 = 0;
          var counter_12622419 = 0;
          if (((expr_12622078).length < 1)) {
          break L24;
          }
          
          L25: do {
            L26: do {
              var elemId_12622420 = null;
              var elemId_12622420_Idx = 0;
              var i_13380473 = 0;
              var L_13380474 = (expr_12622078).length;
              L27: do {
                  L28: while (true) {
                  if (!(i_13380473 < L_13380474)) break L28;
                    elemId_12622420 = expr_12622078; elemId_12622420_Idx = chckIndx(i_13380473, 0, (expr_12622078).length-1);
                    L29: do {
                      if ((counter_12622419 == 0)) {
                      if ((elemId_12622420[elemId_12622420_Idx] == 40)) {
                      counter_12622419 = addInt(counter_12622419, 1);
                      pos_12622417 = addInt(pos_12622417, 1);
                      break L29;
                      }
                      else {
                        break L24;
                      }
                      
                      }
                      
                      if ((counter_12622419 == 1)) {
                      L30: do {
                          if (!true) Tmp31 = false; else {                            tail_12680212.push(elemId_12622420[elemId_12622420_Idx]);;
                            Tmp31 = true;                          }                        if (Tmp31) {
                        }
                        else {
                          break L24;
                        }
                        
                      } while(false);
                      }
                      
                      pos_12622417 = addInt(pos_12622417, 1);
                    } while(false);
                    i_13380473 = addInt(i_13380473, 1);
                    if (!(((expr_12622078).length == L_13380474))) {
                    failedAssertImpl_1305480(makeNimstrLit("iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                    }
                    
                  }
              } while(false);
            } while(false);
          } while(false);
          matched_12622418 = true;
        } while(false);
      if (matched_12622418) {
      Tmp2 = HEX26_12660654([{ttype: 2, name: null}], tokenize_12622046(tail_12680212));
      }
      else {
        var tail_12690212 = [];
        var matched_12622424 = false;
        L32: do {
          var pos_12622423 = 0;
          var counter_12622425 = 0;
          if (((expr_12622078).length < 1)) {
          break L32;
          }
          
          L33: do {
            L34: do {
              var elemId_12622426 = null;
              var elemId_12622426_Idx = 0;
              var i_13380480 = 0;
              var L_13380481 = (expr_12622078).length;
              L35: do {
                  L36: while (true) {
                  if (!(i_13380480 < L_13380481)) break L36;
                    elemId_12622426 = expr_12622078; elemId_12622426_Idx = chckIndx(i_13380480, 0, (expr_12622078).length-1);
                    L37: do {
                      if ((counter_12622425 == 0)) {
                      if ((elemId_12622426[elemId_12622426_Idx] == 41)) {
                      counter_12622425 = addInt(counter_12622425, 1);
                      pos_12622423 = addInt(pos_12622423, 1);
                      break L37;
                      }
                      else {
                        break L32;
                      }
                      
                      }
                      
                      if ((counter_12622425 == 1)) {
                      L38: do {
                          if (!true) Tmp39 = false; else {                            tail_12690212.push(elemId_12622426[elemId_12622426_Idx]);;
                            Tmp39 = true;                          }                        if (Tmp39) {
                        }
                        else {
                          break L32;
                        }
                        
                      } while(false);
                      }
                      
                      pos_12622423 = addInt(pos_12622423, 1);
                    } while(false);
                    i_13380480 = addInt(i_13380480, 1);
                    if (!(((expr_12622078).length == L_13380481))) {
                    failedAssertImpl_1305480(makeNimstrLit("iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                    }
                    
                  }
              } while(false);
            } while(false);
          } while(false);
          matched_12622424 = true;
        } while(false);
      if (matched_12622424) {
      Tmp2 = HEX26_12660654([{ttype: 3, name: null}], tokenize_12622046(tail_12690212));
      }
      else {
        var tail_12700212 = [];
        var matched_12622430 = false;
        L40: do {
          var pos_12622429 = 0;
          var counter_12622431 = 0;
          if (((expr_12622078).length < 2)) {
          break L40;
          }
          
          L41: do {
            L42: do {
              var elemId_12622432 = null;
              var elemId_12622432_Idx = 0;
              var i_13380487 = 0;
              var L_13380488 = (expr_12622078).length;
              L43: do {
                  L44: while (true) {
                  if (!(i_13380487 < L_13380488)) break L44;
                    elemId_12622432 = expr_12622078; elemId_12622432_Idx = chckIndx(i_13380487, 0, (expr_12622078).length-1);
                    L45: do {
                      if ((counter_12622431 == 0)) {
                      if ((elemId_12622432[elemId_12622432_Idx] == 58)) {
                      counter_12622431 = addInt(counter_12622431, 1);
                      pos_12622429 = addInt(pos_12622429, 1);
                      break L45;
                      }
                      else {
                        break L40;
                      }
                      
                      }
                      
                      if ((counter_12622431 == 1)) {
                      if ((elemId_12622432[elemId_12622432_Idx] == 61)) {
                      counter_12622431 = addInt(counter_12622431, 1);
                      pos_12622429 = addInt(pos_12622429, 1);
                      break L45;
                      }
                      else {
                        break L40;
                      }
                      
                      }
                      
                      if ((counter_12622431 == 2)) {
                      L46: do {
                          if (!true) Tmp47 = false; else {                            tail_12700212.push(elemId_12622432[elemId_12622432_Idx]);;
                            Tmp47 = true;                          }                        if (Tmp47) {
                        }
                        else {
                          break L40;
                        }
                        
                      } while(false);
                      }
                      
                      pos_12622429 = addInt(pos_12622429, 1);
                    } while(false);
                    i_13380487 = addInt(i_13380487, 1);
                    if (!(((expr_12622078).length == L_13380488))) {
                    failedAssertImpl_1305480(makeNimstrLit("iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                    }
                    
                  }
              } while(false);
            } while(false);
          } while(false);
          matched_12622430 = true;
        } while(false);
      if (matched_12622430) {
      Tmp2 = HEX26_12660654([{ttype: 5, name: null}], tokenize_12622046(tail_12700212));
      }
      else {
        var tail_12710212 = [];
        var matched_12622437 = false;
        L48: do {
          var pos_12622436 = 0;
          var counter_12622438 = 0;
          if (((expr_12622078).length < 1)) {
          break L48;
          }
          
          L49: do {
            L50: do {
              var elemId_12622439 = null;
              var elemId_12622439_Idx = 0;
              var i_13380494 = 0;
              var L_13380495 = (expr_12622078).length;
              L51: do {
                  L52: while (true) {
                  if (!(i_13380494 < L_13380495)) break L52;
                    elemId_12622439 = expr_12622078; elemId_12622439_Idx = chckIndx(i_13380494, 0, (expr_12622078).length-1);
                    L53: do {
                      if ((counter_12622438 == 0)) {
                      if ((elemId_12622439[elemId_12622439_Idx] == 32)) {
                      counter_12622438 = addInt(counter_12622438, 1);
                      pos_12622436 = addInt(pos_12622436, 1);
                      break L53;
                      }
                      else {
                        break L48;
                      }
                      
                      }
                      
                      if ((counter_12622438 == 1)) {
                      if (!((elemId_12622439[elemId_12622439_Idx] == 32))) {
                      counter_12622438 = addInt(counter_12622438, 1);
                      }
                      else {
                      }
                      
                      }
                      
                      if ((counter_12622438 == 2)) {
                      L54: do {
                          if (!true) Tmp55 = false; else {                            tail_12710212.push(elemId_12622439[elemId_12622439_Idx]);;
                            Tmp55 = true;                          }                        if (Tmp55) {
                        }
                        else {
                          break L48;
                        }
                        
                      } while(false);
                      }
                      
                      pos_12622436 = addInt(pos_12622436, 1);
                    } while(false);
                    i_13380494 = addInt(i_13380494, 1);
                    if (!(((expr_12622078).length == L_13380495))) {
                    failedAssertImpl_1305480(makeNimstrLit("iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                    }
                    
                  }
              } while(false);
            } while(false);
          } while(false);
          matched_12622437 = true;
        } while(false);
      if (matched_12622437) {
      Tmp2 = tokenize_12622046(tail_12710212);
      }
      else {
        var tail_12725212 = [];
        var a_12735212 = [];
        var matched_12622443 = false;
        L56: do {
          var pos_12622442 = 0;
          var counter_12622444 = 0;
          if (((expr_12622078).length < 0)) {
          break L56;
          }
          
          L57: do {
            L58: do {
              var elemId_12622445 = null;
              var elemId_12622445_Idx = 0;
              var i_13380499 = 0;
              var L_13380500 = (expr_12622078).length;
              L59: do {
                  L60: while (true) {
                  if (!(i_13380499 < L_13380500)) break L60;
                    elemId_12622445 = expr_12622078; elemId_12622445_Idx = chckIndx(i_13380499, 0, (expr_12622078).length-1);
                    if ((counter_12622444 == 0)) {
                      var it_12735617 = elemId_12622445[elemId_12622445_Idx];
                      if (baseToken_12622029(it_12735617)) {
                      Tmp61 = true;
                      }
                      else {
                      Tmp61 = false;
                      }
                      
                    if (Tmp61) {
                    counter_12622444 = addInt(counter_12622444, 1);
                    }
                    else {
                      a_12735212.push(elemId_12622445[elemId_12622445_Idx]);;
                    var _ = true;
                    }
                    
                    }
                    
                    if ((counter_12622444 == 1)) {
                    L62: do {
                        if (!true) Tmp63 = false; else {                          tail_12725212.push(elemId_12622445[elemId_12622445_Idx]);;
                          Tmp63 = true;                        }                      if (Tmp63) {
                      }
                      else {
                        break L56;
                      }
                      
                    } while(false);
                    }
                    
                    pos_12622442 = addInt(pos_12622442, 1);
                    i_13380499 = addInt(i_13380499, 1);
                    if (!(((expr_12622078).length == L_13380500))) {
                    failedAssertImpl_1305480(makeNimstrLit("iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                    }
                    
                  }
              } while(false);
            } while(false);
          } while(false);
          matched_12622443 = true;
        } while(false);
      if (matched_12622443) {
      Tmp2 = HEX26_12735646({ttype: 4, name: toJSStr(a_12735212)}, tokenize_12622046(tail_12725212));
      }
      else {
        raiseException({message: makeNimstrLit("\xCE\xBB-Lexer Error: Illegal symbol encountered."), parent: null, m_type: NTI1194617, name: null, trace: [], up: null}, "Exception");
      }
      }}}}}}}
    } while(false);
    result_12622051 = nimCopy(null, Tmp2, NTI12660661);

  return result_12622051;

}
function HEX3DHEX3D_12975024(x_12975028, y_12975030) {
  var result_12975031 = false;

  BeforeRet: do {
    var sameObject_12975601 = false;
    sameObject_12975601 = x_12975028 === y_12975030
    if (sameObject_12975601) {
    result_12975031 = true;
    break BeforeRet;
    }
    
    if (!(((x_12975028).length == (y_12975030).length))) {
    result_12975031 = false;
    break BeforeRet;
    }
    
    L1: do {
      var i_12976024 = 0;
      var colontmp__13380578 = 0;
      colontmp__13380578 = subInt((x_12975028).length, 1);
      var res_13380579 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_13380579 <= colontmp__13380578)) break L3;
            i_12976024 = res_13380579;
            if (!((x_12975028[chckIndx(i_12976024, 0, (x_12975028).length-1)] == y_12975030[chckIndx(i_12976024, 0, (y_12975030).length-1)]))) {
            result_12975031 = false;
            break BeforeRet;
            }
            
            res_13380579 = addInt(res_13380579, 1);
          }
      } while(false);
    } while(false);
    result_12975031 = true;
    break BeforeRet;
  } while (false);

  return result_12975031;

}
function HEX5BHEX5D_12985022(s_12985028, x_12985030) {
  var result_12985032 = [];

    var a_12985201 = x_12985030.a;
    var L_12985405 = addInt(subInt(subInt((s_12985028).length, x_12985030.b), a_12985201), 1);
    result_12985032 = new Array(chckRange(L_12985405, 0, 2147483647)); for (var i=0;i<chckRange(L_12985405, 0, 2147483647);++i) {result_12985032[i]=[];}    L1: do {
      var i_12985420 = 0;
      var i_13380587 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_13380587 < L_12985405)) break L3;
            i_12985420 = i_13380587;
            result_12985032[chckIndx(i_12985420, 0, (result_12985032).length-1)] = nimCopy(null, s_12985028[chckIndx(addInt(i_12985420, a_12985201), 0, (s_12985028).length-1)], NTI12940033);
            i_13380587 = addInt(i_13380587, 1);
          }
      } while(false);
    } while(false);

  return result_12985032;

}
function HEX2EHEX2E_6145001(a_6145006, b_6145008) {
  var result_6145014 = ({a: 0, b: 0});

    nimCopy(result_6145014, {a: a_6145006, b: b_6145008}, NTI6145011);

  return result_6145014;

}
function HEX5BHEX5D_12990005(s_12990009, i_12990010) {
  var result_12990011 = [];

    result_12990011 = nimCopy(null, s_12990009[chckIndx(subInt((s_12990009).length, i_12990010), 0, (s_12990009).length-1)], NTI12940033);

  return result_12990011;

}
function HEX26_12920032(x_12920036, y_12920038) {
  var result_12920040 = [];

    result_12920040 = new Array(chckRange(addInt((x_12920036).length, (y_12920038).length), 0, 2147483647)); for (var i=0;i<chckRange(addInt((x_12920036).length, (y_12920038).length), 0, 2147483647);++i) {result_12920040[i]=[];}    L1: do {
      var i_12920071 = 0;
      var colontmp__13380616 = 0;
      colontmp__13380616 = subInt((x_12920036).length, 1);
      var res_13380617 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_13380617 <= colontmp__13380616)) break L3;
            i_12920071 = res_13380617;
            result_12920040[chckIndx(i_12920071, 0, (result_12920040).length-1)] = nimCopy(null, x_12920036[chckIndx(i_12920071, 0, (x_12920036).length-1)], NTI12660653);
            res_13380617 = addInt(res_13380617, 1);
          }
      } while(false);
    } while(false);
    L4: do {
      var i_12920085 = 0;
      var colontmp__13380623 = 0;
      colontmp__13380623 = subInt((y_12920038).length, 1);
      var res_13380624 = 0;
      L5: do {
          L6: while (true) {
          if (!(res_13380624 <= colontmp__13380623)) break L6;
            i_12920085 = res_13380624;
            result_12920040[chckIndx(addInt(i_12920085, (x_12920036).length), 0, (result_12920040).length-1)] = nimCopy(null, y_12920038[chckIndx(i_12920085, 0, (y_12920038).length-1)], NTI12660653);
            res_13380624 = addInt(res_13380624, 1);
          }
      } while(false);
    } while(false);

  return result_12920040;

}
function HEX5BHEX5D_12855021(s_12855027, x_12855029) {
  var result_12855031 = [];

    var a_12855201 = x_12855029.a;
    var L_12855405 = addInt(subInt(subInt((s_12855027).length, x_12855029.b), a_12855201), 1);
    result_12855031 = new Array(chckRange(L_12855405, 0, 2147483647)); for (var i=0;i<chckRange(L_12855405, 0, 2147483647);++i) {result_12855031[i]=null;}    L1: do {
      var i_12855420 = 0;
      var i_13380632 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_13380632 < L_12855405)) break L3;
            i_12855420 = i_13380632;
            result_12855031[chckIndx(i_12855420, 0, (result_12855031).length-1)] = s_12855027[chckIndx(addInt(i_12855420, a_12855201), 0, (s_12855027).length-1)];
            i_13380632 = addInt(i_13380632, 1);
          }
      } while(false);
    } while(false);

  return result_12855031;

}
function initTable_12741061(initialSize_12741065) {
  var result_12741067 = ({data: [], counter: 0});

    var correctSizeHEX60gensym0_12745001 = slotsNeeded_2465048(chckRange(initialSize_12741065, 0, 2147483647));
    result_12741067.counter = 0;
    result_12741067.data = new Array(chckRange(correctSizeHEX60gensym0_12745001, 0, 2147483647)); for (var i=0;i<chckRange(correctSizeHEX60gensym0_12745001, 0, 2147483647);++i) {result_12741067.data[i]={Field0: 0, Field1: 0, Field2: 0};}
  return result_12741067;

}
function hashWangYi1_2165417(x_2165420) {
  var result_2165421 = 0;

            if (typeof BigInt == 'undefined') {
          result_2165421 = x_2165420; // For Node < 10.4, etc. we do the old identity hash
        } else {          // Otherwise we match the low 32-bits of C/C++ hash
          function hi_xor_lo_js(a, b) {
            const prod = BigInt(a) * BigInt(b);
            const mask = (BigInt(1) << BigInt(64)) - BigInt(1);
            return (prod >> BigInt(64)) ^ (prod & mask);
          }
          const P0  = BigInt(0xa0761d64)<<BigInt(32)|BigInt(0x78bd642f);
          const P1  = BigInt(0xe7037ed1)<<BigInt(32)|BigInt(0xa0b428db);
          const P58 = BigInt(0xeb44acca)<<BigInt(32)|BigInt(0xb455d165)^BigInt(8);
          var res   = hi_xor_lo_js(hi_xor_lo_js(P0, BigInt(x_2165420) ^ P1), P58);
          result_2165421  = Number(res & ((BigInt(1) << BigInt(53)) - BigInt(1)));
        }

  return result_2165421;

}
function hash_12770001(x_12770004) {
  var result_12770005 = 0;

    result_12770005 = hashWangYi1_2165417(x_12770004);

  return result_12770005;

}
function isFilled_2462218(hcode_2462220) {
  var result_2462221 = false;

    result_2462221 = !((hcode_2462220 == 0));

  return result_2462221;

}
function nextTry_2465014(h_2465016, maxHash_2465017) {
  var result_2465018 = 0;

    result_2465018 = (addInt(h_2465016, 1) & maxHash_2465017);

  return result_2465018;

}
function rawGet_12765602(t_12765606, key_12765607, hc_12765608, hc_12765608_Idx) {
            var Tmp3;

  var result_12765609 = 0;

  BeforeRet: do {
    hc_12765608[hc_12765608_Idx] = hash_12770001(key_12765607);
    if ((hc_12765608[hc_12765608_Idx] == 0)) {
    hc_12765608[hc_12765608_Idx] = 314159265;
    }
    
    if (((t_12765606.data).length == 0)) {
    result_12765609 = -1;
    break BeforeRet;
    }
    
    var h_12775138 = (hc_12765608[hc_12765608_Idx] & ((t_12765606.data).length-1));
    L1: do {
        L2: while (true) {
        if (!isFilled_2462218(t_12765606.data[chckIndx(h_12775138, 0, (t_12765606.data).length-1)].Field0)) break L2;
            if (!(t_12765606.data[chckIndx(h_12775138, 0, (t_12765606.data).length-1)].Field0 == hc_12765608[hc_12765608_Idx])) Tmp3 = false; else {              Tmp3 = (t_12765606.data[chckIndx(h_12775138, 0, (t_12765606.data).length-1)].Field1 == key_12765607);            }          if (Tmp3) {
          result_12765609 = h_12775138;
          break BeforeRet;
          }
          
          h_12775138 = nextTry_2465014(h_12775138, ((t_12765606.data).length-1));
        }
    } while(false);
    result_12765609 = subInt(-1, h_12775138);
  } while (false);

  return result_12765609;

}
function mustRehash_12790601(t_12790604) {
  var result_12790605 = false;

    if (!((t_12790604.counter < (t_12790604.data).length))) {
    failedAssertImpl_1305480(makeNimstrLit("hashcommon.nim(34, 9) `\x0At.counter < t.dataLen` "));
    }
    
    result_12790605 = ((mulInt((t_12790604.data).length, 2) < mulInt(t_12790604.counter, 3)) || (subInt((t_12790604.data).length, t_12790604.counter) < 4));

  return result_12790605;

}
function rawInsert_12816108(t_12816114, data_12816117, data_12816117_Idx, key_12816118, val_12816120, hc_12816121, h_12816122) {
    data_12816117[data_12816117_Idx][chckIndx(h_12816122, 0, (data_12816117[data_12816117_Idx]).length-1)].Field1 = key_12816118;
    data_12816117[data_12816117_Idx][chckIndx(h_12816122, 0, (data_12816117[data_12816117_Idx]).length-1)].Field2 = val_12816120;
    data_12816117[data_12816117_Idx][chckIndx(h_12816122, 0, (data_12816117[data_12816117_Idx]).length-1)].Field0 = hc_12816121;

  
}
function enlarge_12815161(t_12815167) {
    var n_12815175 = [];
    n_12815175 = new Array(chckRange(mulInt((t_12815167.data).length, 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_12815167.data).length, 2), 0, 2147483647);++i) {n_12815175[i]={Field0: 0, Field1: 0, Field2: 0};}    var Tmp1 = t_12815167.data; t_12815167.data = n_12815175; n_12815175 = Tmp1;    L2: do {
      var i_12815334 = 0;
      var colontmp__13380648 = 0;
      colontmp__13380648 = ((n_12815175).length-1);
      var res_13380653 = 0;
      L3: do {
          L4: while (true) {
          if (!(res_13380653 <= colontmp__13380648)) break L4;
            i_12815334 = res_13380653;
            var eh_12815483 = n_12815175[chckIndx(i_12815334, 0, (n_12815175).length-1)].Field0;
            if (isFilled_2462218(eh_12815483)) {
            var j_12815490 = (eh_12815483 & ((t_12815167.data).length-1));
            L5: do {
                L6: while (true) {
                if (!isFilled_2462218(t_12815167.data[chckIndx(j_12815490, 0, (t_12815167.data).length-1)].Field0)) break L6;
                  j_12815490 = nextTry_2465014(j_12815490, ((t_12815167.data).length-1));
                }
            } while(false);
            rawInsert_12816108(t_12815167, t_12815167, "data", n_12815175[chckIndx(i_12815334, 0, (n_12815175).length-1)].Field1, n_12815175[chckIndx(i_12815334, 0, (n_12815175).length-1)].Field2, eh_12815483, j_12815490);
            }
            
            res_13380653 = addInt(res_13380653, 1);
          }
      } while(false);
    } while(false);

  
}
function rawGetKnownHC_12816594(t_12816598, key_12816599, hc_12816600) {
  var result_12816601 = 0;

  BeforeRet: do {
    if (((t_12816598.data).length == 0)) {
    result_12816601 = -1;
    break BeforeRet;
    }
    
    var h_12820138 = (hc_12816600 & ((t_12816598.data).length-1));
    L1: do {
        L2: while (true) {
        if (!isFilled_2462218(t_12816598.data[chckIndx(h_12820138, 0, (t_12816598.data).length-1)].Field0)) break L2;
          if (((t_12816598.data[chckIndx(h_12820138, 0, (t_12816598.data).length-1)].Field0 == hc_12816600) && (t_12816598.data[chckIndx(h_12820138, 0, (t_12816598.data).length-1)].Field1 == key_12816599))) {
          result_12816601 = h_12820138;
          break BeforeRet;
          }
          
          h_12820138 = nextTry_2465014(h_12820138, ((t_12816598.data).length-1));
        }
    } while(false);
    result_12816601 = subInt(-1, h_12820138);
  } while (false);

  return result_12816601;

}
function HEX5BHEX5DHEX3D_12750778(t_12750784, key_12750785, val_12750787) {
    if (((t_12750784.data).length == 0)) {
    var correctSizeHEX60gensym3_12760001 = slotsNeeded_2465048(32);
    t_12750784.counter = 0;
    t_12750784.data = new Array(chckRange(correctSizeHEX60gensym3_12760001, 0, 2147483647)); for (var i=0;i<chckRange(correctSizeHEX60gensym3_12760001, 0, 2147483647);++i) {t_12750784.data[i]={Field0: 0, Field1: 0, Field2: 0};}    }
    
    var hc_12765601 = [0];
    var index_12775623 = rawGet_12765602(t_12750784, key_12750785, hc_12765601, 0);
    if ((0 <= index_12775623)) {
    t_12750784.data[chckIndx(index_12775623, 0, (t_12750784.data).length-1)].Field2 = val_12750787;
    }
    else {
      if (((t_12750784.data).length == 0)) {
      var correctSizeHEX60gensym8_12785001 = slotsNeeded_2465048(32);
      t_12750784.counter = 0;
      t_12750784.data = new Array(chckRange(correctSizeHEX60gensym8_12785001, 0, 2147483647)); for (var i=0;i<chckRange(correctSizeHEX60gensym8_12785001, 0, 2147483647);++i) {t_12750784.data[i]={Field0: 0, Field1: 0, Field2: 0};}      }
      
      if (mustRehash_12790601(t_12750784)) {
      enlarge_12815161(t_12750784);
      index_12775623 = rawGetKnownHC_12816594(t_12750784, key_12750785, hc_12765601[0]);
      }
      
      index_12775623 = subInt(-1, index_12775623);
      rawInsert_12816108(t_12750784, t_12750784, "data", key_12750785, val_12750787, hc_12765601[0], index_12775623);
      t_12750784.counter = addInt(t_12750784.counter, 1);
    }
    

  
}
function toTable_12741036(pairs_12741042) {
  var result_12741058 = [({data: [], counter: 0})];

    nimCopy(result_12741058[0], initTable_12741061((pairs_12741042).length), NTI12741045);
    L1: do {
      var key_12750665 = null;
      var key_12750665_Idx = 0;
      var val_12750667 = null;
      var val_12750667_Idx = 0;
      var i_13380640 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_13380640 < (pairs_12741042).length)) break L3;
            key_12750665 = pairs_12741042[chckIndx(i_13380640, 0, (pairs_12741042).length-1)]; key_12750665_Idx = "Field0";
            val_12750667 = pairs_12741042[chckIndx(i_13380640, 0, (pairs_12741042).length-1)]; val_12750667_Idx = "Field1";
            HEX5BHEX5DHEX3D_12750778(result_12741058[0], key_12750665[key_12750665_Idx], val_12750667[val_12750667_Idx]);
            i_13380640 = addInt(i_13380640, 1);
          }
      } while(false);
    } while(false);

  return result_12741058[0];

}
function map_12830028(s_12830033, op_12830036) {
  var result_12830038 = [];

    result_12830038 = new Array(chckRange((s_12830033).length, 0, 2147483647)); for (var i=0;i<chckRange((s_12830033).length, 0, 2147483647);++i) {result_12830038[i]=0;}    L1: do {
      var i_12830061 = 0;
      var colontmp__13380660 = 0;
      colontmp__13380660 = (s_12830033).length;
      var i_13380661 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_13380661 < colontmp__13380660)) break L3;
            i_12830061 = i_13380661;
            result_12830038[chckIndx(i_12830061, 0, (result_12830038).length-1)] = op_12830036(s_12830033[chckIndx(i_12830061, 0, (s_12830033).length-1)]);
            i_13380661 = addInt(i_13380661, 1);
          }
      } while(false);
    } while(false);

  return result_12830038;

}
function HEX5BHEX5D_12825159(t_12825164, key_12825165) {
  var result_12825166 = 0;

    var hcHEX60gensym20_12825167 = [0];
    var indexHEX60gensym20_12825176 = rawGet_12765602(t_12825164, key_12825165, hcHEX60gensym20_12825167, 0);
    if ((0 <= indexHEX60gensym20_12825176)) {
    result_12825166 = t_12825164.data[chckIndx(indexHEX60gensym20_12825176, 0, (t_12825164.data).length-1)].Field2;
    }
    else {
      raiseException({message: (makeNimstrLit("key not found: ") || []).concat(reprEnum(key_12825165, NTI12622016) || []), parent: null, m_type: NTI1194645, name: null, trace: [], up: null}, "KeyError");
    }
    

  return result_12825166;

}
function HEX5BHEX5D_12840227(s_12840233, x_12840235) {
  var result_12840237 = [];

    var a_12840401 = x_12840235.a;
    var L_12840601 = addInt(subInt(x_12840235.b, a_12840401), 1);
    result_12840237 = new Array(chckRange(L_12840601, 0, 2147483647)); for (var i=0;i<chckRange(L_12840601, 0, 2147483647);++i) {result_12840237[i]=null;}    L1: do {
      var i_12840616 = 0;
      var i_13380667 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_13380667 < L_12840601)) break L3;
            i_12840616 = i_13380667;
            result_12840237[chckIndx(i_12840616, 0, (result_12840237).length-1)] = s_12840233[chckIndx(addInt(i_12840616, a_12840401), 0, (s_12840233).length-1)];
            i_13380667 = addInt(i_13380667, 1);
          }
      } while(false);
    } while(false);

  return result_12840237;

}
function HEX2EHEX2E_3695220(a_3695225, b_3695227) {
  var result_3695229 = ({a: 0, b: 0});

    nimCopy(result_3695229, {a: a_3695225, b: b_3695227}, NTI2235020);

  return result_3695229;

}
function matchingParenthesis_12741014(prog_12741017) {
    function HEX3Aanonymous_12825001(t_12825009) {
      var result_12825014 = 0;

        result_12825014 = HEX5BHEX5D_12825159(mappings_12820712, t_12825009.ttype);

      return result_12825014;

    }
    var Tmp3;

  var result_12741021 = {Field0: [], Field1: []};

    var mappings_12820712 = toTable_12741036([{Field0: 2, Field1: -1}, {Field0: 3, Field1: 1}, {Field0: 1, Field1: 0}, {Field0: 0, Field1: 0}, {Field0: 4, Field1: 0}]);
    var vals_12830077 = map_12830028(prog_12741017, HEX3Aanonymous_12825001);
    var i_12830079 = 0;
    var bal_12830081 = -1;
    L1: do {
        L2: while (true) {
        if (!((bal_12830081 < 0) && (i_12830079 < (vals_12830077).length))) break L2;
          bal_12830081 = addInt(bal_12830081, vals_12830077[chckIndx(i_12830079, 0, (vals_12830077).length-1)]);
          i_12830079 = addInt(i_12830079, 1);
        }
    } while(false);
    if ((bal_12830081 < 0)) {
    raiseException({message: makeNimstrLit("\xCE\xBB-Parse Error: Mismatched parentheses."), parent: null, m_type: NTI1194617, name: null, trace: [], up: null}, "Exception");
    }
    
    if ((i_12830079 == (prog_12741017).length)) {
    Tmp3 = {Field0: HEX5BHEX5D_12840227(prog_12741017, HEX2EHEX2E_3695220(0, subInt(subInt(i_12830079, 1), 1))), Field1: []};
    }
    else {
    Tmp3 = {Field0: HEX5BHEX5D_12840227(prog_12741017, HEX2EHEX2E_3695220(0, subInt(subInt(i_12830079, 1), 1))), Field1: HEX5BHEX5D_12855021(prog_12741017, HEX2EHEX2E_6145001(i_12830079, 1))};
    }
    
    nimCopy(result_12741021, Tmp3, NTI12741018);

  return result_12741021;

}
function parse_12855525(prog_12855528) {
      var Tmp2;
                        var Tmp9;
                        var Tmp10;
                          var Tmp11;
                        var Tmp12;
                          var Tmp14;
function genApplication_12940030(atoms_12940034) {
                        var Tmp8;
                        var Tmp9;

  var result_12940035 = null;

  BeforeRet: do {
    L1: do {
      var expr_12940036 = nimCopy(null, atoms_12940034, NTI12940032);
      var pos_12940043 = 0;
      var _ = pos_12940043;
        var aWasSet_12945005 = false;
        var a_12970218 = [];
        var matched_12940038 = false;
        L2: do {
          var pos_12940037 = 0;
          var counter_12940039 = 0;
          if (!((ConstSet8[chckRange((expr_12940036).length, 0, 65535)] != undefined))) {
          break L2;
          }
          
          L3: do {
            L4: do {
              var elemId_12940040 = null;
              var elemId_12940040_Idx = 0;
              var i_13380571 = 0;
              var L_13380572 = (expr_12940036).length;
              L5: do {
                  L6: while (true) {
                  if (!(i_13380571 < L_13380572)) break L6;
                    elemId_12940040 = expr_12940036; elemId_12940040_Idx = chckIndx(i_13380571, 0, (expr_12940036).length-1);
                    L7: do {
                      if ((counter_12940039 == 0)) {
                        if (aWasSet_12945005) {
                        if (HEX3DHEX3D_12975024(a_12970218, elemId_12940040[elemId_12940040_Idx])) {
                        Tmp9 = true;
                        }
                        else {
                          if (true) {
                          }
                          
                        Tmp9 = false;
                        }
                        
                        Tmp8 = Tmp9;
                        }
                        else {
                          a_12970218 = nimCopy(null, elemId_12940040[elemId_12940040_Idx], NTI12940033);
                          aWasSet_12945005 = true;
                        Tmp8 = true;
                        }
                        
                      if (!(Tmp8)) {
                      break L2;
                      }
                      
                      counter_12940039 = addInt(counter_12940039, 1);
                      pos_12940037 = addInt(pos_12940037, 1);
                      break L7;
                      }
                      
                      pos_12940037 = addInt(pos_12940037, 1);
                    } while(false);
                    i_13380571 = addInt(i_13380571, 1);
                    if (!(((expr_12940036).length == L_13380572))) {
                    failedAssertImpl_1305480(makeNimstrLit("iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                    }
                    
                  }
              } while(false);
            } while(false);
          } while(false);
          matched_12940038 = true;
        } while(false);
      if (matched_12940038) {
      result_12940035 = parse_12855525(a_12970218);
      break BeforeRet;
      }
      else {
        result_12940035 = {t: 2, t1: genApplication_12940030(HEX5BHEX5D_12985022(atoms_12940034, HEX2EHEX2E_6145001(0, 2))), t2: parse_12855525(HEX5BHEX5D_12990005(atoms_12940034, 1)), id: null, param: null, body: null, name: null, val: null};
        break BeforeRet;
      }
      
    } while(false);
  } while (false);

  return result_12940035;

}
function findAtoms_12855530(subprog_12855533) {
                        var Tmp13;
                        var Tmp14;
                          var Tmp15;
                        var Tmp22;
                        var Tmp23;
                          var Tmp24;
                        var Tmp31;
                          var Tmp33;

  var result_12855536 = [];

  BeforeRet: do {
    L1: do {
      var expr_12855537 = nimCopy(null, subprog_12855533, NTI12855532);
      var pos_12855677 = 0;
      var _ = pos_12855677;
        var matched_12855539 = false;
        L2: do {
          var pos_12855538 = 0;
          var counter_12855540 = 0;
          if (!((ConstSet9[chckRange((expr_12855537).length, 0, 65535)] != undefined))) {
          break L2;
          }
          
          L3: do {
            L4: do {
              var elemId_12855541 = null;
              var elemId_12855541_Idx = 0;
              var i_13380592 = 0;
              var L_13380593 = (expr_12855537).length;
              L5: do {
                  L6: while (true) {
                  if (!(i_13380592 < L_13380593)) break L6;
                    elemId_12855541 = expr_12855537; elemId_12855541_Idx = chckIndx(i_13380592, 0, (expr_12855537).length-1);
                    pos_12855538 = addInt(pos_12855538, 1);
                    i_13380592 = addInt(i_13380592, 1);
                    if (!(((expr_12855537).length == L_13380593))) {
                    failedAssertImpl_1305480(makeNimstrLit("iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                    }
                    
                  }
              } while(false);
            } while(false);
          } while(false);
          matched_12855539 = true;
        } while(false);
      if (matched_12855539) {
      result_12855536 = nimCopy(null, [], NTI12885234);
      break BeforeRet;
      }
      else {
        var name_12890213 = null;
        var matched_12855637 = false;
        L7: do {
          var pos_12855636 = 0;
          var counter_12855638 = 0;
          if (!((ConstSet10[chckRange((expr_12855537).length, 0, 65535)] != undefined))) {
          break L7;
          }
          
          L8: do {
            L9: do {
              var elemId_12855639 = null;
              var elemId_12855639_Idx = 0;
              var i_13380597 = 0;
              var L_13380598 = (expr_12855537).length;
              L10: do {
                  L11: while (true) {
                  if (!(i_13380597 < L_13380598)) break L11;
                    elemId_12855639 = expr_12855537; elemId_12855639_Idx = chckIndx(i_13380597, 0, (expr_12855537).length-1);
                    L12: do {
                      if ((counter_12855638 == 0)) {
                        if (!true) Tmp14 = false; else {                          Tmp14 = (elemId_12855639[elemId_12855639_Idx].ttype == 4);                        }                        if (!Tmp14) Tmp13 = false; else {                          var Tmp15 = elemId_12855639[elemId_12855639_Idx];
                          if (ConstSet11[Tmp15.ttype]===undefined) { raiseFieldError(makeNimstrLit("\'name\' is not accessible using discriminant \'ttype\' of type \'Token\'")); }
                          name_12890213 = Tmp15.name;
                          Tmp13 = true;                        }                      if (Tmp13) {
                      counter_12855638 = addInt(counter_12855638, 1);
                      pos_12855636 = addInt(pos_12855636, 1);
                      break L12;
                      }
                      else {
                        break L7;
                      }
                      
                      }
                      
                      pos_12855636 = addInt(pos_12855636, 1);
                    } while(false);
                    i_13380597 = addInt(i_13380597, 1);
                    if (!(((expr_12855537).length == L_13380598))) {
                    failedAssertImpl_1305480(makeNimstrLit("iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                    }
                    
                  }
              } while(false);
            } while(false);
          } while(false);
          matched_12855637 = true;
        } while(false);
      if (matched_12855637) {
      result_12855536 = nimCopy(null, [[{ttype: 4, name: name_12890213}]], NTI12900246);
      break BeforeRet;
      }
      else {
        var name_12905213 = null;
        var matched_12855666 = false;
        L16: do {
          var pos_12855665 = 0;
          var counter_12855667 = 0;
          if (((expr_12855537).length < 1)) {
          break L16;
          }
          
          L17: do {
            L18: do {
              var elemId_12855668 = null;
              var elemId_12855668_Idx = 0;
              var i_13380603 = 0;
              var L_13380604 = (expr_12855537).length;
              L19: do {
                  L20: while (true) {
                  if (!(i_13380603 < L_13380604)) break L20;
                    elemId_12855668 = expr_12855537; elemId_12855668_Idx = chckIndx(i_13380603, 0, (expr_12855537).length-1);
                    L21: do {
                      if ((counter_12855667 == 0)) {
                        if (!true) Tmp23 = false; else {                          Tmp23 = (elemId_12855668[elemId_12855668_Idx].ttype == 4);                        }                        if (!Tmp23) Tmp22 = false; else {                          var Tmp24 = elemId_12855668[elemId_12855668_Idx];
                          if (ConstSet12[Tmp24.ttype]===undefined) { raiseFieldError(makeNimstrLit("\'name\' is not accessible using discriminant \'ttype\' of type \'Token\'")); }
                          name_12905213 = Tmp24.name;
                          Tmp22 = true;                        }                      if (Tmp22) {
                      counter_12855667 = addInt(counter_12855667, 1);
                      pos_12855665 = addInt(pos_12855665, 1);
                      break L21;
                      }
                      else {
                        break L16;
                      }
                      
                      }
                      
                      if ((counter_12855667 == 1)) {
                      break L17;
                      }
                      
                      pos_12855665 = addInt(pos_12855665, 1);
                    } while(false);
                    i_13380603 = addInt(i_13380603, 1);
                    if (!(((expr_12855537).length == L_13380604))) {
                    failedAssertImpl_1305480(makeNimstrLit("iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                    }
                    
                  }
              } while(false);
            } while(false);
          } while(false);
          matched_12855666 = true;
        } while(false);
      if (matched_12855666) {
      result_12855536 = nimCopy(null, HEX26_12920032([[{ttype: 4, name: name_12905213}]], findAtoms_12855530(HEX5BHEX5D_12855021(subprog_12855533, HEX2EHEX2E_6145001(1, 1)))), NTI12920039);
      break BeforeRet;
      }
      else {
        var tail_12930212 = [];
        var matched_12855672 = false;
        L25: do {
          var pos_12855671 = 0;
          var counter_12855673 = 0;
          if (((expr_12855537).length < 1)) {
          break L25;
          }
          
          L26: do {
            L27: do {
              var elemId_12855674 = null;
              var elemId_12855674_Idx = 0;
              var i_13380611 = 0;
              var L_13380612 = (expr_12855537).length;
              L28: do {
                  L29: while (true) {
                  if (!(i_13380611 < L_13380612)) break L29;
                    elemId_12855674 = expr_12855537; elemId_12855674_Idx = chckIndx(i_13380611, 0, (expr_12855537).length-1);
                    L30: do {
                      if ((counter_12855673 == 0)) {
                        if (!true) Tmp31 = false; else {                          Tmp31 = (elemId_12855674[elemId_12855674_Idx].ttype == 2);                        }                      if (Tmp31) {
                      counter_12855673 = addInt(counter_12855673, 1);
                      pos_12855671 = addInt(pos_12855671, 1);
                      break L30;
                      }
                      else {
                        break L25;
                      }
                      
                      }
                      
                      if ((counter_12855673 == 1)) {
                      L32: do {
                          if (!true) Tmp33 = false; else {                            tail_12930212.push(elemId_12855674[elemId_12855674_Idx]);;
                            Tmp33 = true;                          }                        if (Tmp33) {
                        }
                        else {
                          break L25;
                        }
                        
                      } while(false);
                      }
                      
                      pos_12855671 = addInt(pos_12855671, 1);
                    } while(false);
                    i_13380611 = addInt(i_13380611, 1);
                    if (!(((expr_12855537).length == L_13380612))) {
                    failedAssertImpl_1305480(makeNimstrLit("iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                    }
                    
                  }
              } while(false);
            } while(false);
          } while(false);
          matched_12855672 = true;
        } while(false);
      if (matched_12855672) {
      var colontmp__13380634 = matchingParenthesis_12741014(tail_12930212);
      var inner_12935232 = nimCopy(null, colontmp__13380634["Field0"], NTI12741019);
      var rest_12935233 = nimCopy(null, colontmp__13380634["Field1"], NTI12741020);
      result_12855536 = nimCopy(null, HEX26_12920032([nimCopy(null, inner_12935232, NTI12741019)], findAtoms_12855530(rest_12935233)), NTI12920039);
      break BeforeRet;
      }
      else {
        raiseException({message: makeNimstrLit("\xCE\xBB-Parse Error: Atoms have to be on form Var or (Exp)."), parent: null, m_type: NTI1194617, name: null, trace: [], up: null}, "Exception");
      }
      }}}
    } while(false);
  } while (false);

  return result_12855536;

}
      function parseExpr_12990104(subprog_12990107) {
                              var Tmp8;
                              var Tmp9;
                              var Tmp10;
                                var Tmp11;
                              var Tmp12;
                                var Tmp14;
                              var Tmp21;
                              var Tmp22;
                                var Tmp23;
                              var Tmp30;
                              var Tmp31;
                                var Tmp32;
                              var Tmp33;

        var result_12990108 = null;

        BeforeRet: do {
          L1: do {
            var expr_12990109 = nimCopy(null, subprog_12990107, NTI12990106);
            var pos_12990129 = 0;
            var _ = pos_12990129;
              var body_13005212 = [];
              var name_13010213 = null;
              var matched_12990111 = false;
              L2: do {
                var pos_12990110 = 0;
                var counter_12990112 = 0;
                if (((expr_12990109).length < 3)) {
                break L2;
                }
                
                L3: do {
                  L4: do {
                    var elemId_12990113 = null;
                    var elemId_12990113_Idx = 0;
                    var i_13380551 = 0;
                    var L_13380552 = (expr_12990109).length;
                    L5: do {
                        L6: while (true) {
                        if (!(i_13380551 < L_13380552)) break L6;
                          elemId_12990113 = expr_12990109; elemId_12990113_Idx = chckIndx(i_13380551, 0, (expr_12990109).length-1);
                          L7: do {
                            if ((counter_12990112 == 0)) {
                              if (!true) Tmp8 = false; else {                                Tmp8 = (elemId_12990113[elemId_12990113_Idx].ttype == 0);                              }                            if (Tmp8) {
                            counter_12990112 = addInt(counter_12990112, 1);
                            pos_12990110 = addInt(pos_12990110, 1);
                            break L7;
                            }
                            else {
                              break L2;
                            }
                            
                            }
                            
                            if ((counter_12990112 == 1)) {
                              if (!true) Tmp10 = false; else {                                Tmp10 = (elemId_12990113[elemId_12990113_Idx].ttype == 4);                              }                              if (!Tmp10) Tmp9 = false; else {                                var Tmp11 = elemId_12990113[elemId_12990113_Idx];
                                if (ConstSet4[Tmp11.ttype]===undefined) { raiseFieldError(makeNimstrLit("\'name\' is not accessible using discriminant \'ttype\' of type \'Token\'")); }
                                name_13010213 = Tmp11.name;
                                Tmp9 = true;                              }                            if (Tmp9) {
                            counter_12990112 = addInt(counter_12990112, 1);
                            pos_12990110 = addInt(pos_12990110, 1);
                            break L7;
                            }
                            else {
                              break L2;
                            }
                            
                            }
                            
                            if ((counter_12990112 == 2)) {
                              if (!true) Tmp12 = false; else {                                Tmp12 = (elemId_12990113[elemId_12990113_Idx].ttype == 1);                              }                            if (Tmp12) {
                            counter_12990112 = addInt(counter_12990112, 1);
                            pos_12990110 = addInt(pos_12990110, 1);
                            break L7;
                            }
                            else {
                              break L2;
                            }
                            
                            }
                            
                            if ((counter_12990112 == 3)) {
                            L13: do {
                                if (!true) Tmp14 = false; else {                                  body_13005212.push(elemId_12990113[elemId_12990113_Idx]);;
                                  Tmp14 = true;                                }                              if (Tmp14) {
                              }
                              else {
                                break L2;
                              }
                              
                            } while(false);
                            }
                            
                            pos_12990110 = addInt(pos_12990110, 1);
                          } while(false);
                          i_13380551 = addInt(i_13380551, 1);
                          if (!(((expr_12990109).length == L_13380552))) {
                          failedAssertImpl_1305480(makeNimstrLit("iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                          }
                          
                        }
                    } while(false);
                  } while(false);
                } while(false);
                matched_12990111 = true;
              } while(false);
            if (matched_12990111) {
            result_12990108 = {t: 1, param: name_13010213, body: parse_12855525(body_13005212), id: null, t1: null, t2: null, name: null, val: null};
            break BeforeRet;
            }
            else {
              var name_13030213 = null;
              var matched_12990118 = false;
              L15: do {
                var pos_12990117 = 0;
                var counter_12990119 = 0;
                if (!((ConstSet5[chckRange((expr_12990109).length, 0, 65535)] != undefined))) {
                break L15;
                }
                
                L16: do {
                  L17: do {
                    var elemId_12990120 = null;
                    var elemId_12990120_Idx = 0;
                    var i_13380557 = 0;
                    var L_13380558 = (expr_12990109).length;
                    L18: do {
                        L19: while (true) {
                        if (!(i_13380557 < L_13380558)) break L19;
                          elemId_12990120 = expr_12990109; elemId_12990120_Idx = chckIndx(i_13380557, 0, (expr_12990109).length-1);
                          L20: do {
                            if ((counter_12990119 == 0)) {
                              if (!true) Tmp22 = false; else {                                Tmp22 = (elemId_12990120[elemId_12990120_Idx].ttype == 4);                              }                              if (!Tmp22) Tmp21 = false; else {                                var Tmp23 = elemId_12990120[elemId_12990120_Idx];
                                if (ConstSet6[Tmp23.ttype]===undefined) { raiseFieldError(makeNimstrLit("\'name\' is not accessible using discriminant \'ttype\' of type \'Token\'")); }
                                name_13030213 = Tmp23.name;
                                Tmp21 = true;                              }                            if (Tmp21) {
                            counter_12990119 = addInt(counter_12990119, 1);
                            pos_12990117 = addInt(pos_12990117, 1);
                            break L20;
                            }
                            else {
                              break L15;
                            }
                            
                            }
                            
                            pos_12990117 = addInt(pos_12990117, 1);
                          } while(false);
                          i_13380557 = addInt(i_13380557, 1);
                          if (!(((expr_12990109).length == L_13380558))) {
                          failedAssertImpl_1305480(makeNimstrLit("iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                          }
                          
                        }
                    } while(false);
                  } while(false);
                } while(false);
                matched_12990118 = true;
              } while(false);
            if (matched_12990118) {
            result_12990108 = {t: 0, id: name_13030213, param: null, body: null, t1: null, t2: null, name: null, val: null};
            break BeforeRet;
            }
            else {
              var name_13045213 = null;
              var matched_12990124 = false;
              L24: do {
                var pos_12990123 = 0;
                var counter_12990125 = 0;
                if (((expr_12990109).length < 2)) {
                break L24;
                }
                
                L25: do {
                  L26: do {
                    var elemId_12990126 = null;
                    var elemId_12990126_Idx = 0;
                    var i_13380563 = 0;
                    var L_13380564 = (expr_12990109).length;
                    L27: do {
                        L28: while (true) {
                        if (!(i_13380563 < L_13380564)) break L28;
                          elemId_12990126 = expr_12990109; elemId_12990126_Idx = chckIndx(i_13380563, 0, (expr_12990109).length-1);
                          L29: do {
                            if ((counter_12990125 == 0)) {
                              if (!true) Tmp31 = false; else {                                Tmp31 = (elemId_12990126[elemId_12990126_Idx].ttype == 4);                              }                              if (!Tmp31) Tmp30 = false; else {                                var Tmp32 = elemId_12990126[elemId_12990126_Idx];
                                if (ConstSet7[Tmp32.ttype]===undefined) { raiseFieldError(makeNimstrLit("\'name\' is not accessible using discriminant \'ttype\' of type \'Token\'")); }
                                name_13045213 = Tmp32.name;
                                Tmp30 = true;                              }                            if (Tmp30) {
                            counter_12990125 = addInt(counter_12990125, 1);
                            pos_12990123 = addInt(pos_12990123, 1);
                            break L29;
                            }
                            else {
                              break L24;
                            }
                            
                            }
                            
                            if ((counter_12990125 == 1)) {
                              if (!true) Tmp33 = false; else {                                Tmp33 = (elemId_12990126[elemId_12990126_Idx].ttype == 5);                              }                            if (Tmp33) {
                            counter_12990125 = addInt(counter_12990125, 1);
                            pos_12990123 = addInt(pos_12990123, 1);
                            break L29;
                            }
                            else {
                              break L24;
                            }
                            
                            }
                            
                            if ((counter_12990125 == 2)) {
                            break L25;
                            }
                            
                            pos_12990123 = addInt(pos_12990123, 1);
                          } while(false);
                          i_13380563 = addInt(i_13380563, 1);
                          if (!(((expr_12990109).length == L_13380564))) {
                          failedAssertImpl_1305480(makeNimstrLit("iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                          }
                          
                        }
                    } while(false);
                  } while(false);
                } while(false);
                matched_12990124 = true;
              } while(false);
            if (matched_12990124) {
            raiseException({message: makeNimstrLit("\xCE\xBB-Parse Error: Illegal definition. You cannot use \':=\' in an expression."), parent: null, m_type: NTI1194617, name: null, trace: [], up: null}, "Exception");
            }
            else {
              result_12990108 = genApplication_12940030(findAtoms_12855530(subprog_12990107));
              break BeforeRet;
            }
            }}
          } while(false);
        } while (false);

        return result_12990108;

      }

  var result_12855529 = null;

    L1: do {
      var expr_13060015 = nimCopy(null, prog_12855528, NTI12855527);
      var pos_13060023 = 0;
      var _ = pos_13060023;
        var expression_13075212 = [];
        var name_13080213 = null;
        var matched_13060017 = false;
        L3: do {
          var pos_13060016 = 0;
          var counter_13060018 = 0;
          if (((expr_13060015).length < 2)) {
          break L3;
          }
          
          L4: do {
            L5: do {
              var elemId_13060019 = null;
              var elemId_13060019_Idx = 0;
              var i_13380542 = 0;
              var L_13380543 = (expr_13060015).length;
              L6: do {
                  L7: while (true) {
                  if (!(i_13380542 < L_13380543)) break L7;
                    elemId_13060019 = expr_13060015; elemId_13060019_Idx = chckIndx(i_13380542, 0, (expr_13060015).length-1);
                    L8: do {
                      if ((counter_13060018 == 0)) {
                        if (!true) Tmp10 = false; else {                          Tmp10 = (elemId_13060019[elemId_13060019_Idx].ttype == 4);                        }                        if (!Tmp10) Tmp9 = false; else {                          var Tmp11 = elemId_13060019[elemId_13060019_Idx];
                          if (ConstSet3[Tmp11.ttype]===undefined) { raiseFieldError(makeNimstrLit("\'name\' is not accessible using discriminant \'ttype\' of type \'Token\'")); }
                          name_13080213 = Tmp11.name;
                          Tmp9 = true;                        }                      if (Tmp9) {
                      counter_13060018 = addInt(counter_13060018, 1);
                      pos_13060016 = addInt(pos_13060016, 1);
                      break L8;
                      }
                      else {
                        break L3;
                      }
                      
                      }
                      
                      if ((counter_13060018 == 1)) {
                        if (!true) Tmp12 = false; else {                          Tmp12 = (elemId_13060019[elemId_13060019_Idx].ttype == 5);                        }                      if (Tmp12) {
                      counter_13060018 = addInt(counter_13060018, 1);
                      pos_13060016 = addInt(pos_13060016, 1);
                      break L8;
                      }
                      else {
                        break L3;
                      }
                      
                      }
                      
                      if ((counter_13060018 == 2)) {
                      L13: do {
                          if (!true) Tmp14 = false; else {                            expression_13075212.push(elemId_13060019[elemId_13060019_Idx]);;
                            Tmp14 = true;                          }                        if (Tmp14) {
                        }
                        else {
                          break L3;
                        }
                        
                      } while(false);
                      }
                      
                      pos_13060016 = addInt(pos_13060016, 1);
                    } while(false);
                    i_13380542 = addInt(i_13380542, 1);
                    if (!(((expr_13060015).length == L_13380543))) {
                    failedAssertImpl_1305480(makeNimstrLit("iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                    }
                    
                  }
              } while(false);
            } while(false);
          } while(false);
          matched_13060017 = true;
        } while(false);
      if (matched_13060017) {
      Tmp2 = {t: 3, name: name_13080213, val: parseExpr_12990104(expression_13075212), id: null, param: null, body: null, t1: null, t2: null};
      }
      else {
      Tmp2 = parseExpr_12990104(prog_12855528);
      }
      
    } while(false);
    result_12855529 = Tmp2;

  return result_12855529;

}
function imul_2166082(a_2166084, b_2166085) {
  var result_2166086 = 0;

    var mask_2166087 = 65535;
    var aHi_2166096 = (((a_2166084 >>> 0) >>> 16) & mask_2166087);
    var aLo_2166097 = (a_2166084 & mask_2166087);
    var bHi_2166106 = (((b_2166085 >>> 0) >>> 16) & mask_2166087);
    var bLo_2166107 = (b_2166085 & mask_2166087);
    result_2166086 = ((((aLo_2166097 * bLo_2166107) >>> 0) + (((((aHi_2166096 * bLo_2166107) >>> 0) + ((aLo_2166097 * bHi_2166106) >>> 0)) >>> 0) << 16)) >>> 0);

  return result_2166086;

}
function rotl32_2166201(x_2166203, r_2166204) {
  var result_2166205 = 0;

    result_2166205 = ((x_2166203 << r_2166204) | ((x_2166203 >>> 0) >>> subInt(32, r_2166204)));

  return result_2166205;

}
function murmurHash_2166229(x_2166232) {
  var result_2166233 = 0;

  BeforeRet: do {
    var size_2166243 = (x_2166232).length;
    var stepSize_2166245 = 4;
    var n_2166246 = divInt(size_2166243, stepSize_2166245);
    var h1_2166247 = 0;
    var i_2166249 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_2166249 < mulInt(n_2166246, stepSize_2166245))) break L2;
          var k1_2166250 = 0;
          var j_2166251 = stepSize_2166245;
          L3: do {
              L4: while (true) {
              if (!(0 < j_2166251)) break L4;
                j_2166251 = subInt(j_2166251, 1);
                k1_2166250 = ((k1_2166250 << 8) | x_2166232[chckIndx(addInt(i_2166249, j_2166251), 0, (x_2166232).length-1)]);
              }
          } while(false);
          i_2166249 = addInt(i_2166249, stepSize_2166245);
          k1_2166250 = imul_2166082(k1_2166250, 3432918353);
          k1_2166250 = rotl32_2166201(k1_2166250, 15);
          k1_2166250 = imul_2166082(k1_2166250, 461845907);
          h1_2166247 = (h1_2166247 ^ k1_2166250);
          h1_2166247 = rotl32_2166201(h1_2166247, 13);
          h1_2166247 = ((((h1_2166247 * 5) >>> 0) + 3864292196) >>> 0);
        }
    } while(false);
    var k1_2170208 = 0;
    var rem_2170209 = modInt(size_2166243, stepSize_2166245);
    L5: do {
        L6: while (true) {
        if (!(0 < rem_2170209)) break L6;
          rem_2170209 = subInt(rem_2170209, 1);
          k1_2170208 = ((k1_2170208 << 8) | x_2166232[chckIndx(addInt(i_2166249, rem_2170209), 0, (x_2166232).length-1)]);
        }
    } while(false);
    k1_2170208 = imul_2166082(k1_2170208, 3432918353);
    k1_2170208 = rotl32_2166201(k1_2170208, 15);
    k1_2170208 = imul_2166082(k1_2170208, 461845907);
    h1_2166247 = (h1_2166247 ^ k1_2170208);
    h1_2166247 = (h1_2166247 ^ size_2166243);
    h1_2166247 = (h1_2166247 ^ ((h1_2166247 >>> 0) >>> 16));
    h1_2166247 = imul_2166082(h1_2166247, 2246822507);
    h1_2166247 = (h1_2166247 ^ ((h1_2166247 >>> 0) >>> 13));
    h1_2166247 = imul_2166082(h1_2166247, 3266489909);
    h1_2166247 = (h1_2166247 ^ ((h1_2166247 >>> 0) >>> 16));
    result_2166233 = (h1_2166247|0);
    break BeforeRet;
  } while (false);

  return result_2166233;

}
function hash_2205814(x_2205816) {
  var result_2205817 = 0;

    var xx_2206201 = cstrToNimstr(x_2205816);
    result_2205817 = murmurHash_2166229((xx_2206201.slice(0, ((xx_2206201).length-1)+1)));

  return result_2205817;

}
function rawGet_13155342(t_13155346, key_13155347, hc_13155348, hc_13155348_Idx) {
            var Tmp3;

  var result_13155349 = 0;

  BeforeRet: do {
    hc_13155348[hc_13155348_Idx] = hash_2205814(key_13155347);
    if ((hc_13155348[hc_13155348_Idx] == 0)) {
    hc_13155348[hc_13155348_Idx] = 314159265;
    }
    
    if (((t_13155346.data).length == 0)) {
    result_13155349 = -1;
    break BeforeRet;
    }
    
    var h_13165138 = (hc_13155348[hc_13155348_Idx] & ((t_13155346.data).length-1));
    L1: do {
        L2: while (true) {
        if (!isFilled_2462218(t_13155346.data[chckIndx(h_13165138, 0, (t_13155346.data).length-1)].Field0)) break L2;
            if (!(t_13155346.data[chckIndx(h_13165138, 0, (t_13155346.data).length-1)].Field0 == hc_13155348[hc_13155348_Idx])) Tmp3 = false; else {              Tmp3 = (t_13155346.data[chckIndx(h_13165138, 0, (t_13155346.data).length-1)].Field1 == key_13155347);            }          if (Tmp3) {
          result_13155349 = h_13165138;
          break BeforeRet;
          }
          
          h_13165138 = nextTry_2465014(h_13165138, ((t_13155346.data).length-1));
        }
    } while(false);
    result_13155349 = subInt(-1, h_13165138);
  } while (false);

  return result_13155349;

}
function mustRehash_13345601(t_13345604) {
  var result_13345605 = false;

    if (!((t_13345604.counter < (t_13345604.data).length))) {
    failedAssertImpl_1305480(makeNimstrLit("hashcommon.nim(34, 9) `\x0At.counter < t.dataLen` "));
    }
    
    result_13345605 = ((mulInt((t_13345604.data).length, 2) < mulInt(t_13345604.counter, 3)) || (subInt((t_13345604.data).length, t_13345604.counter) < 4));

  return result_13345605;

}
function rawInsert_13371108(t_13371114, data_13371117, data_13371117_Idx, key_13371118, val_13371120, hc_13371121, h_13371122) {
    data_13371117[data_13371117_Idx][chckIndx(h_13371122, 0, (data_13371117[data_13371117_Idx]).length-1)].Field1 = key_13371118;
    data_13371117[data_13371117_Idx][chckIndx(h_13371122, 0, (data_13371117[data_13371117_Idx]).length-1)].Field2 = val_13371120;
    data_13371117[data_13371117_Idx][chckIndx(h_13371122, 0, (data_13371117[data_13371117_Idx]).length-1)].Field0 = hc_13371121;

  
}
function enlarge_13370161(t_13370167) {
    var n_13370175 = [];
    n_13370175 = new Array(chckRange(mulInt((t_13370167.data).length, 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_13370167.data).length, 2), 0, 2147483647);++i) {n_13370175[i]={Field0: 0, Field1: null, Field2: null};}    var Tmp1 = t_13370167.data; t_13370167.data = n_13370175; n_13370175 = Tmp1;    L2: do {
      var i_13370334 = 0;
      var colontmp__13380679 = 0;
      colontmp__13380679 = ((n_13370175).length-1);
      var res_13380680 = 0;
      L3: do {
          L4: while (true) {
          if (!(res_13380680 <= colontmp__13380679)) break L4;
            i_13370334 = res_13380680;
            var eh_13370483 = n_13370175[chckIndx(i_13370334, 0, (n_13370175).length-1)].Field0;
            if (isFilled_2462218(eh_13370483)) {
            var j_13370490 = (eh_13370483 & ((t_13370167.data).length-1));
            L5: do {
                L6: while (true) {
                if (!isFilled_2462218(t_13370167.data[chckIndx(j_13370490, 0, (t_13370167.data).length-1)].Field0)) break L6;
                  j_13370490 = nextTry_2465014(j_13370490, ((t_13370167.data).length-1));
                }
            } while(false);
            rawInsert_13371108(t_13370167, t_13370167, "data", n_13370175[chckIndx(i_13370334, 0, (n_13370175).length-1)].Field1, n_13370175[chckIndx(i_13370334, 0, (n_13370175).length-1)].Field2, eh_13370483, j_13370490);
            }
            
            res_13380680 = addInt(res_13380680, 1);
          }
      } while(false);
    } while(false);

  
}
function rawGetKnownHC_13371594(t_13371598, key_13371599, hc_13371600) {
  var result_13371601 = 0;

  BeforeRet: do {
    if (((t_13371598.data).length == 0)) {
    result_13371601 = -1;
    break BeforeRet;
    }
    
    var h_13375138 = (hc_13371600 & ((t_13371598.data).length-1));
    L1: do {
        L2: while (true) {
        if (!isFilled_2462218(t_13371598.data[chckIndx(h_13375138, 0, (t_13371598.data).length-1)].Field0)) break L2;
          if (((t_13371598.data[chckIndx(h_13375138, 0, (t_13371598.data).length-1)].Field0 == hc_13371600) && (t_13371598.data[chckIndx(h_13375138, 0, (t_13371598.data).length-1)].Field1 == key_13371599))) {
          result_13371601 = h_13375138;
          break BeforeRet;
          }
          
          h_13375138 = nextTry_2465014(h_13375138, ((t_13371598.data).length-1));
        }
    } while(false);
    result_13371601 = subInt(-1, h_13375138);
  } while (false);

  return result_13371601;

}
function HEX5BHEX5DHEX3D_13315131(t_13315137, key_13315138, val_13315140) {
    if (((t_13315137.data).length == 0)) {
    var correctSizeHEX60gensym158_13325001 = slotsNeeded_2465048(32);
    t_13315137.counter = 0;
    t_13315137.data = new Array(chckRange(correctSizeHEX60gensym158_13325001, 0, 2147483647)); for (var i=0;i<chckRange(correctSizeHEX60gensym158_13325001, 0, 2147483647);++i) {t_13315137.data[i]={Field0: 0, Field1: null, Field2: null};}    }
    
    var hc_13330601 = [0];
    var index_13330610 = rawGet_13155342(t_13315137, key_13315138, hc_13330601, 0);
    if ((0 <= index_13330610)) {
    t_13315137.data[chckIndx(index_13330610, 0, (t_13315137.data).length-1)].Field2 = val_13315140;
    }
    else {
      if (((t_13315137.data).length == 0)) {
      var correctSizeHEX60gensym161_13340001 = slotsNeeded_2465048(32);
      t_13315137.counter = 0;
      t_13315137.data = new Array(chckRange(correctSizeHEX60gensym161_13340001, 0, 2147483647)); for (var i=0;i<chckRange(correctSizeHEX60gensym161_13340001, 0, 2147483647);++i) {t_13315137.data[i]={Field0: 0, Field1: null, Field2: null};}      }
      
      if (mustRehash_13345601(t_13315137)) {
      enlarge_13370161(t_13315137);
      index_13330610 = rawGetKnownHC_13371594(t_13315137, key_13315138, hc_13330601[0]);
      }
      
      index_13330610 = subInt(-1, index_13330610);
      rawInsert_13371108(t_13315137, t_13315137, "data", key_13315138, val_13315140, hc_13330601[0], index_13330610);
      t_13315137.counter = addInt(t_13315137.counter, 1);
    }
    

  
}
function hasKey_13155333(t_13155338, key_13155339) {
  var result_13155340 = false;

    var hc_13155341 = [0];
    result_13155340 = (0 <= rawGet_13155342(t_13155338, key_13155339, hc_13155341, 0));

  return result_13155340;

}
function contains_13155323(t_13155328, key_13155329) {
  var result_13155330 = false;

  BeforeRet: do {
    result_13155330 = hasKey_13155333(t_13155328, key_13155329);
    break BeforeRet;
  } while (false);

  return result_13155330;

}
function HEX5BHEX5D_13165788(t_13165794, key_13165795) {
  var result_13165797 = null;
  var result_13165797_Idx = 0;

    var hcHEX60gensym22_13165798 = [0];
    var indexHEX60gensym22_13165807 = rawGet_13155342(t_13165794, key_13165795, hcHEX60gensym22_13165798, 0);
    if ((0 <= indexHEX60gensym22_13165807)) {
    result_13165797 = t_13165794.data[chckIndx(indexHEX60gensym22_13165807, 0, (t_13165794.data).length-1)]; result_13165797_Idx = "Field2";
    }
    else {
      raiseException({message: (makeNimstrLit("key not found: ") || []).concat(cstrToNimstr(key_13165795) || []), parent: null, m_type: NTI1194645, name: null, trace: [], up: null}, "KeyError");
    }
    

  return [result_13165797, result_13165797_Idx];

}
function expand_13145663(t_13145665) {
      var Tmp2;
        var Tmp3;
        var Tmp4;
          var Tmp5;
      var Tmp6;
      var Tmp7;
        var Tmp8;
        var Tmp9;
        var Tmp10;
          var Tmp11;
          var Tmp12;
        var Tmp13;
        var Tmp14;
        var Tmp15;
          var Tmp16;
          var Tmp17;

  var result_13145666 = null;

    L1: do {
      var expr_13145667 = t_13145665;
      var pos_13145673 = 0;
      var _ = pos_13145673;
        var id_13150007 = null;
        if (!true) Tmp4 = false; else {          Tmp4 = (expr_13145667.t == 0);        }        if (!Tmp4) Tmp3 = false; else {          var Tmp5 = expr_13145667;
          if (ConstSet14[Tmp5.t]===undefined) { raiseFieldError(makeNimstrLit("\'id\' is not accessible using discriminant \'t\' of type \'T\'")); }
          id_13150007 = Tmp5.id;
          Tmp3 = true;        }      if (Tmp3) {
      if (contains_13155323(store_13145629[0], id_13150007)) {
      Tmp6 = (Tmp7 = HEX5BHEX5D_13165788(store_13145629[0], id_13150007), Tmp7)[0][Tmp7[1]];
      }
      else {
      Tmp6 = t_13145665;
      }
      
      Tmp2 = Tmp6;
      }
      else {
        var body_13170030 = null;
        var param_13170033 = null;
        if (!true) Tmp10 = false; else {          Tmp10 = (expr_13145667.t == 1);        }        if (!Tmp10) Tmp9 = false; else {          var Tmp11 = expr_13145667;
          if (ConstSet15[Tmp11.t]===undefined) { raiseFieldError(makeNimstrLit("\'param\' is not accessible using discriminant \'t\' of type \'T\'")); }
          param_13170033 = Tmp11.param;
          Tmp9 = true;        }        if (!Tmp9) Tmp8 = false; else {          var Tmp12 = expr_13145667;
          if (ConstSet16[Tmp12.t]===undefined) { raiseFieldError(makeNimstrLit("\'body\' is not accessible using discriminant \'t\' of type \'T\'")); }
          body_13170030 = Tmp12.body;
          Tmp8 = true;        }      if (Tmp8) {
      Tmp2 = {t: 1, param: param_13170033, body: expand_13145663(body_13170030), id: null, t1: null, t2: null, name: null, val: null};
      }
      else {
        var t2_13175210 = null;
        var t1_13175213 = null;
        if (!true) Tmp15 = false; else {          Tmp15 = (expr_13145667.t == 2);        }        if (!Tmp15) Tmp14 = false; else {          var Tmp16 = expr_13145667;
          if (ConstSet17[Tmp16.t]===undefined) { raiseFieldError(makeNimstrLit("\'t1\' is not accessible using discriminant \'t\' of type \'T\'")); }
          t1_13175213 = Tmp16.t1;
          Tmp14 = true;        }        if (!Tmp14) Tmp13 = false; else {          var Tmp17 = expr_13145667;
          if (ConstSet18[Tmp17.t]===undefined) { raiseFieldError(makeNimstrLit("\'t2\' is not accessible using discriminant \'t\' of type \'T\'")); }
          t2_13175210 = Tmp17.t2;
          Tmp13 = true;        }      if (Tmp13) {
      Tmp2 = {t: 2, t1: expand_13145663(t1_13175213), t2: expand_13145663(t2_13175210), id: null, param: null, body: null, name: null, val: null};
      }
      else {
        raiseException({message: makeNimstrLit("\xCE\xBB-Eval Error: Error while expanding expression with value from store."), parent: null, m_type: NTI1194617, name: null, trace: [], up: null}, "Exception");
      }
      }}
    } while(false);
    result_13145666 = Tmp2;

  return result_13145666;

}
function substitute_13185015(t_13185017, id_13185018, t2_13185019) {
      var Tmp2;
        var Tmp3;
        var Tmp4;
          var Tmp5;
        var Tmp6;
        var Tmp7;
          var Tmp9;
            var Tmp10;
            var Tmp11;
            var Tmp12;
              var Tmp13;
              var Tmp14;
        var Tmp16;
          var Tmp17;
          var Tmp18;
            var Tmp19;
        var Tmp20;
        var Tmp21;
        var Tmp22;
          var Tmp23;
          var Tmp24;
        var Tmp26;
          var Tmp27;
          var Tmp28;
            var Tmp29;
        var Tmp30;
        var Tmp31;
        var Tmp32;
          var Tmp33;
          var Tmp34;

  var result_13185020 = null;

    L1: do {
      var expr_13185021 = t_13185017;
      var pos_13185028 = 0;
      var _ = pos_13185028;
        if (!true) Tmp4 = false; else {          Tmp4 = (expr_13185021.t == 0);        }        if (!Tmp4) Tmp3 = false; else {          var Tmp5 = expr_13185021;
          if (ConstSet38[Tmp5.t]===undefined) { raiseFieldError(makeNimstrLit("\'id\' is not accessible using discriminant \'t\' of type \'T\'")); }
          Tmp3 = (Tmp5.id == id_13185018);        }      if (Tmp3) {
      Tmp2 = t2_13185019;
      }
      else {
        if (!true) Tmp7 = false; else {          Tmp7 = (expr_13185021.t == 0);        }        if (!Tmp7) Tmp6 = false; else {          Tmp6 = true;        }      if (Tmp6) {
      Tmp2 = t_13185017;
      }
      else {
        var body_13200208 = null;
        var a_13200210 = null;
        L8: do {
            if (!true) Tmp12 = false; else {              Tmp12 = (expr_13185021.t == 1);            }            if (!Tmp12) Tmp11 = false; else {              var Tmp13 = expr_13185021;
              if (ConstSet39[Tmp13.t]===undefined) { raiseFieldError(makeNimstrLit("\'param\' is not accessible using discriminant \'t\' of type \'T\'")); }
              Tmp11 = (Tmp13.param == id_13185018);            }            if (!Tmp11) Tmp10 = false; else {              var Tmp14 = expr_13185021;
              if (ConstSet40[Tmp14.t]===undefined) { raiseFieldError(makeNimstrLit("\'body\' is not accessible using discriminant \'t\' of type \'T\'")); }
              body_13200208 = Tmp14.body;
              Tmp10 = true;            }          if (Tmp10) {
          a_13200210 = expr_13185021;
          Tmp9 = true;
          }
          else {
          Tmp9 = false;
          }
          
        } while(false);
      if (Tmp9) {
      L15: do {
        var expr_13205208 = t2_13185019;
        var pos_13205209 = 0;
        var _ = pos_13205209;
          if (!true) Tmp18 = false; else {            Tmp18 = (expr_13205208.t == 0);          }          if (!Tmp18) Tmp17 = false; else {            var Tmp19 = expr_13205208;
            if (ConstSet41[Tmp19.t]===undefined) { raiseFieldError(makeNimstrLit("\'id\' is not accessible using discriminant \'t\' of type \'T\'")); }
            Tmp17 = (Tmp19.id == id_13185018);          }        if (Tmp17) {
        var nid_13215207 = (cstrToNimstr(id_13185018) || []).concat(makeNimstrLit("\'") || []);
        Tmp16 = {t: 1, param: toJSStr(nid_13215207), body: substitute_13185015(substitute_13185015(body_13200208, id_13185018, {t: 0, id: toJSStr(nid_13215207), param: null, body: null, t1: null, t2: null, name: null, val: null}), id_13185018, t2_13185019), id: null, t1: null, t2: null, name: null, val: null};
        }
        else {
        Tmp16 = a_13200210;
        }
        
      } while(false);
      Tmp2 = Tmp16;
      }
      else {
        var body_13215211 = null;
        var param_13215214 = null;
        if (!true) Tmp22 = false; else {          Tmp22 = (expr_13185021.t == 1);        }        if (!Tmp22) Tmp21 = false; else {          var Tmp23 = expr_13185021;
          if (ConstSet42[Tmp23.t]===undefined) { raiseFieldError(makeNimstrLit("\'param\' is not accessible using discriminant \'t\' of type \'T\'")); }
          param_13215214 = Tmp23.param;
          Tmp21 = true;        }        if (!Tmp21) Tmp20 = false; else {          var Tmp24 = expr_13185021;
          if (ConstSet43[Tmp24.t]===undefined) { raiseFieldError(makeNimstrLit("\'body\' is not accessible using discriminant \'t\' of type \'T\'")); }
          body_13215211 = Tmp24.body;
          Tmp20 = true;        }      if (Tmp20) {
      L25: do {
        var expr_13220208 = t2_13185019;
        var pos_13220209 = 0;
        var _ = pos_13220209;
          if (!true) Tmp28 = false; else {            Tmp28 = (expr_13220208.t == 0);          }          if (!Tmp28) Tmp27 = false; else {            var Tmp29 = expr_13220208;
            if (ConstSet44[Tmp29.t]===undefined) { raiseFieldError(makeNimstrLit("\'id\' is not accessible using discriminant \'t\' of type \'T\'")); }
            Tmp27 = (Tmp29.id == param_13215214);          }        if (Tmp27) {
        var nid_13230207 = (cstrToNimstr(param_13215214) || []).concat(makeNimstrLit("\'") || []);
        Tmp26 = {t: 1, param: toJSStr(nid_13230207), body: substitute_13185015(substitute_13185015(body_13215211, param_13215214, {t: 0, id: toJSStr(nid_13230207), param: null, body: null, t1: null, t2: null, name: null, val: null}), id_13185018, t2_13185019), id: null, t1: null, t2: null, name: null, val: null};
        }
        else {
        Tmp26 = {t: 1, param: param_13215214, body: substitute_13185015(body_13215211, id_13185018, t2_13185019), id: null, t1: null, t2: null, name: null, val: null};
        }
        
      } while(false);
      Tmp2 = Tmp26;
      }
      else {
        var t3_13230212 = null;
        var t1_13230215 = null;
        if (!true) Tmp32 = false; else {          Tmp32 = (expr_13185021.t == 2);        }        if (!Tmp32) Tmp31 = false; else {          var Tmp33 = expr_13185021;
          if (ConstSet45[Tmp33.t]===undefined) { raiseFieldError(makeNimstrLit("\'t1\' is not accessible using discriminant \'t\' of type \'T\'")); }
          t1_13230215 = Tmp33.t1;
          Tmp31 = true;        }        if (!Tmp31) Tmp30 = false; else {          var Tmp34 = expr_13185021;
          if (ConstSet46[Tmp34.t]===undefined) { raiseFieldError(makeNimstrLit("\'t2\' is not accessible using discriminant \'t\' of type \'T\'")); }
          t3_13230212 = Tmp34.t2;
          Tmp30 = true;        }      if (Tmp30) {
      Tmp2 = {t: 2, t1: substitute_13185015(t1_13230215, id_13185018, t2_13185019), t2: substitute_13185015(t3_13230212, id_13185018, t2_13185019), id: null, param: null, body: null, name: null, val: null};
      }
      else {
        raiseException({message: makeNimstrLit("\xCE\xBB-Eval Error: Error while substituting."), parent: null, m_type: NTI1194617, name: null, trace: [], up: null}, "Exception");
      }
      }}}}
    } while(false);
    result_13185020 = Tmp2;

  return result_13185020;

}
function eval_13240015(t_13240017) {
    var Tmp1;
    var Tmp2;
    function evalExpr_13240019(t_13240021) {
          var Tmp2;
            var Tmp3;
            var Tmp4;
              var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;
              var Tmp9;
              var Tmp10;
              var Tmp11;
              var Tmp12;
                var Tmp13;
                var Tmp14;
                var Tmp15;
                var Tmp16;
                var Tmp17;
            var Tmp18;
            var Tmp19;
            var Tmp20;
              var Tmp21;
              var Tmp22;
            var Tmp23;
            var Tmp24;
            var Tmp25;
                var Tmp27;
                  var Tmp28;
                  var Tmp29;
                    var Tmp30;
                var Tmp31;
              var Tmp32;
            var Tmp33;
            var Tmp34;
            var Tmp35;
              var Tmp36;
              var Tmp37;
              var Tmp38;
                var Tmp39;
                var Tmp40;
                var Tmp41;
                var Tmp42;
                var Tmp43;
              var Tmp44;
            var Tmp45;
            var Tmp46;
            var Tmp47;
                var Tmp49;
                  var Tmp50;
                  var Tmp51;
                  var Tmp52;
                    var Tmp53;
                var Tmp54;
              var Tmp55;
          var Tmp56;
            function varAtBottom_13295210(t_13295212) {
                  var Tmp2;
                    var Tmp3;
                    var Tmp4;
                    var Tmp5;
                      var Tmp6;
                    var Tmp7;
                    var Tmp8;

              var result_13295213 = false;

                L1: do {
                  var expr_13295214 = t_13295212;
                  var pos_13295216 = 0;
                  var _ = pos_13295216;
                    var t1_13300007 = null;
                    if (!true) Tmp5 = false; else {                      Tmp5 = (expr_13295214.t == 2);                    }                    if (!Tmp5) Tmp4 = false; else {                      var Tmp6 = expr_13295214;
                      if (ConstSet50[Tmp6.t]===undefined) { raiseFieldError(makeNimstrLit("\'t1\' is not accessible using discriminant \'t\' of type \'T\'")); }
                      t1_13300007 = Tmp6.t1;
                      Tmp4 = true;                    }                    if (!Tmp4) Tmp3 = false; else {                      Tmp3 = true;                    }                  if (Tmp3) {
                  Tmp2 = varAtBottom_13295210(t1_13300007);
                  }
                  else {
                    if (!true) Tmp8 = false; else {                      Tmp8 = (expr_13295214.t == 0);                    }                    if (!Tmp8) Tmp7 = false; else {                      Tmp7 = true;                    }                  if (Tmp7) {
                  Tmp2 = true;
                  }
                  else {
                  Tmp2 = false;
                  }
                  }
                } while(false);
                result_13295213 = Tmp2;

              return result_13295213;

            }

      var result_13240022 = null;

        L1: do {
          var expr_13240023 = t_13240021;
          var pos_13240037 = 0;
          var _ = pos_13240037;
            var id_13245007 = null;
            if (!true) Tmp4 = false; else {              Tmp4 = (expr_13240023.t == 0);            }            if (!Tmp4) Tmp3 = false; else {              var Tmp5 = expr_13240023;
              if (ConstSet20[Tmp5.t]===undefined) { raiseFieldError(makeNimstrLit("\'id\' is not accessible using discriminant \'t\' of type \'T\'")); }
              id_13245007 = Tmp5.id;
              Tmp3 = true;            }          if (Tmp3) {
          Tmp2 = t_13240021;
          }
          else {
            var id_13250209 = null;
            var body_13250213 = null;
            var id2_13250217 = null;
            if (!true) Tmp8 = false; else {              Tmp8 = (expr_13240023.t == 1);            }            if (!Tmp8) Tmp7 = false; else {              var Tmp9 = expr_13240023;
              if (ConstSet21[Tmp9.t]===undefined) { raiseFieldError(makeNimstrLit("\'param\' is not accessible using discriminant \'t\' of type \'T\'")); }
              id_13250209 = Tmp9.param;
              Tmp7 = true;            }            if (!Tmp7) Tmp6 = false; else {              if (!true) Tmp12 = false; else {                var Tmp13 = expr_13240023;
                if (ConstSet22[Tmp13.t]===undefined) { raiseFieldError(makeNimstrLit("\'body\' is not accessible using discriminant \'t\' of type \'T\'")); }
                Tmp12 = (Tmp13.body.t == 1);              }              if (!Tmp12) Tmp11 = false; else {                var Tmp14 = expr_13240023;
                if (ConstSet24[Tmp14.t]===undefined) { raiseFieldError(makeNimstrLit("\'body\' is not accessible using discriminant \'t\' of type \'T\'")); }
                var Tmp15 = Tmp14.body;
                if (ConstSet23[Tmp15.t]===undefined) { raiseFieldError(makeNimstrLit("\'param\' is not accessible using discriminant \'t\' of type \'T\'")); }
                id2_13250217 = Tmp15.param;
                Tmp11 = true;              }              if (!Tmp11) Tmp10 = false; else {                var Tmp16 = expr_13240023;
                if (ConstSet26[Tmp16.t]===undefined) { raiseFieldError(makeNimstrLit("\'body\' is not accessible using discriminant \'t\' of type \'T\'")); }
                var Tmp17 = Tmp16.body;
                if (ConstSet25[Tmp17.t]===undefined) { raiseFieldError(makeNimstrLit("\'body\' is not accessible using discriminant \'t\' of type \'T\'")); }
                body_13250213 = Tmp17.body;
                Tmp10 = true;              }              Tmp6 = Tmp10;            }          if (Tmp6) {
          Tmp2 = {t: 1, param: id_13250209, body: {t: 1, param: id2_13250217, body: evalExpr_13240019(body_13250213), id: null, t1: null, t2: null, name: null, val: null}, id: null, t1: null, t2: null, name: null, val: null};
          }
          else {
            var id_13260213 = null;
            var body_13260216 = null;
            if (!true) Tmp20 = false; else {              Tmp20 = (expr_13240023.t == 1);            }            if (!Tmp20) Tmp19 = false; else {              var Tmp21 = expr_13240023;
              if (ConstSet27[Tmp21.t]===undefined) { raiseFieldError(makeNimstrLit("\'param\' is not accessible using discriminant \'t\' of type \'T\'")); }
              id_13260213 = Tmp21.param;
              Tmp19 = true;            }            if (!Tmp19) Tmp18 = false; else {              var Tmp22 = expr_13240023;
              if (ConstSet28[Tmp22.t]===undefined) { raiseFieldError(makeNimstrLit("\'body\' is not accessible using discriminant \'t\' of type \'T\'")); }
              body_13260216 = Tmp22.body;
              Tmp18 = true;            }          if (Tmp18) {
          Tmp2 = {t: 1, param: id_13260213, body: evalExpr_13240019(body_13260216), id: null, t1: null, t2: null, name: null, val: null};
          }
          else {
            var t2_13265210 = null;
            var t1_13265213 = null;
            if (!true) Tmp25 = false; else {              Tmp25 = (expr_13240023.t == 2);            }            if (!Tmp25) Tmp24 = false; else {              L26: do {
                  if (!true) Tmp29 = false; else {                    var Tmp30 = expr_13240023;
                    if (ConstSet29[Tmp30.t]===undefined) { raiseFieldError(makeNimstrLit("\'t1\' is not accessible using discriminant \'t\' of type \'T\'")); }
                    Tmp29 = (Tmp30.t1.t == 0);                  }                  if (!Tmp29) Tmp28 = false; else {                    Tmp28 = true;                  }                if (Tmp28) {
                var Tmp31 = expr_13240023;
                if (ConstSet30[Tmp31.t]===undefined) { raiseFieldError(makeNimstrLit("\'t1\' is not accessible using discriminant \'t\' of type \'T\'")); }
                t1_13265213 = Tmp31.t1;
                Tmp27 = true;
                }
                else {
                Tmp27 = false;
                }
                
              } while(false);
              Tmp24 = Tmp27;            }            if (!Tmp24) Tmp23 = false; else {              var Tmp32 = expr_13240023;
              if (ConstSet31[Tmp32.t]===undefined) { raiseFieldError(makeNimstrLit("\'t2\' is not accessible using discriminant \'t\' of type \'T\'")); }
              t2_13265210 = Tmp32.t2;
              Tmp23 = true;            }          if (Tmp23) {
          Tmp2 = {t: 2, t1: t1_13265213, t2: evalExpr_13240019(t2_13265210), id: null, param: null, body: null, name: null, val: null};
          }
          else {
            var t2_13275211 = null;
            var id_13275215 = null;
            var body_13275219 = null;
            if (!true) Tmp35 = false; else {              Tmp35 = (expr_13240023.t == 2);            }            if (!Tmp35) Tmp34 = false; else {              if (!true) Tmp38 = false; else {                var Tmp39 = expr_13240023;
                if (ConstSet32[Tmp39.t]===undefined) { raiseFieldError(makeNimstrLit("\'t1\' is not accessible using discriminant \'t\' of type \'T\'")); }
                Tmp38 = (Tmp39.t1.t == 1);              }              if (!Tmp38) Tmp37 = false; else {                var Tmp40 = expr_13240023;
                if (ConstSet34[Tmp40.t]===undefined) { raiseFieldError(makeNimstrLit("\'t1\' is not accessible using discriminant \'t\' of type \'T\'")); }
                var Tmp41 = Tmp40.t1;
                if (ConstSet33[Tmp41.t]===undefined) { raiseFieldError(makeNimstrLit("\'param\' is not accessible using discriminant \'t\' of type \'T\'")); }
                id_13275215 = Tmp41.param;
                Tmp37 = true;              }              if (!Tmp37) Tmp36 = false; else {                var Tmp42 = expr_13240023;
                if (ConstSet36[Tmp42.t]===undefined) { raiseFieldError(makeNimstrLit("\'t1\' is not accessible using discriminant \'t\' of type \'T\'")); }
                var Tmp43 = Tmp42.t1;
                if (ConstSet35[Tmp43.t]===undefined) { raiseFieldError(makeNimstrLit("\'body\' is not accessible using discriminant \'t\' of type \'T\'")); }
                body_13275219 = Tmp43.body;
                Tmp36 = true;              }              Tmp34 = Tmp36;            }            if (!Tmp34) Tmp33 = false; else {              var Tmp44 = expr_13240023;
              if (ConstSet37[Tmp44.t]===undefined) { raiseFieldError(makeNimstrLit("\'t2\' is not accessible using discriminant \'t\' of type \'T\'")); }
              t2_13275211 = Tmp44.t2;
              Tmp33 = true;            }          if (Tmp33) {
          Tmp2 = evalExpr_13240019(substitute_13185015(body_13275219, id_13275215, t2_13275211));
          }
          else {
            var t2_13285215 = null;
            var t1_13285218 = null;
            if (!true) Tmp47 = false; else {              Tmp47 = (expr_13240023.t == 2);            }            if (!Tmp47) Tmp46 = false; else {              L48: do {
                  if (!true) Tmp52 = false; else {                    var Tmp53 = expr_13240023;
                    if (ConstSet47[Tmp53.t]===undefined) { raiseFieldError(makeNimstrLit("\'t1\' is not accessible using discriminant \'t\' of type \'T\'")); }
                    Tmp52 = (Tmp53.t1.t == 2);                  }                  if (!Tmp52) Tmp51 = false; else {                    Tmp51 = true;                  }                  if (!Tmp51) Tmp50 = false; else {                    Tmp50 = true;                  }                if (Tmp50) {
                var Tmp54 = expr_13240023;
                if (ConstSet48[Tmp54.t]===undefined) { raiseFieldError(makeNimstrLit("\'t1\' is not accessible using discriminant \'t\' of type \'T\'")); }
                t1_13285218 = Tmp54.t1;
                Tmp49 = true;
                }
                else {
                Tmp49 = false;
                }
                
              } while(false);
              Tmp46 = Tmp49;            }            if (!Tmp46) Tmp45 = false; else {              var Tmp55 = expr_13240023;
              if (ConstSet49[Tmp55.t]===undefined) { raiseFieldError(makeNimstrLit("\'t2\' is not accessible using discriminant \'t\' of type \'T\'")); }
              t2_13285215 = Tmp55.t2;
              Tmp45 = true;            }          if (Tmp45) {
          var temp_13295209 = {t: 2, t1: evalExpr_13240019(t1_13285218), t2: t2_13285215, id: null, param: null, body: null, name: null, val: null};
          if (varAtBottom_13295210(temp_13295209)) {
          Tmp56 = temp_13295209;
          }
          else {
          Tmp56 = evalExpr_13240019({t: 2, t1: evalExpr_13240019(t1_13285218), t2: t2_13285215, id: null, param: null, body: null, name: null, val: null});
          }
          
          Tmp2 = Tmp56;
          }
          else {
            raiseException({message: makeNimstrLit("\xCE\xBB-Eval Error: Didn\'t match on any terms."), parent: null, m_type: NTI1194617, name: null, trace: [], up: null}, "Exception");
          }
          }}}}}
        } while(false);
        result_13240022 = Tmp2;

      return result_13240022;

    }

  var result_13240018 = null;

  BeforeRet: do {
    if ((t_13240017.t == 3)) {
    var Tmp1 = t_13240017;
    if (ConstSet13[Tmp1.t]===undefined) { raiseFieldError(makeNimstrLit("\'name\' is not accessible using discriminant \'t\' of type \'T\'")); }
    var Tmp2 = t_13240017;
    if (ConstSet19[Tmp2.t]===undefined) { raiseFieldError(makeNimstrLit("\'val\' is not accessible using discriminant \'t\' of type \'T\'")); }
    HEX5BHEX5DHEX3D_13315131(store_13145629[0], Tmp1.name, expand_13145663(Tmp2.val));
    result_13240018 = {t: 4, id: null, param: null, body: null, t1: null, t2: null, name: null, val: null};
    break BeforeRet;
    }
    
    var expanded_13375649 = expand_13145663(t_13240017);
    result_13240018 = evalExpr_13240019(expanded_13375649);
    break BeforeRet;
  } while (false);

  return result_13240018;

}
function pprint_13091015(t_13091017) {
    var Tmp1;
      var Tmp2;
      var Tmp3;
      var Tmp4;
      var Tmp5;
      var Tmp6;
      var Tmp7;
      var Tmp8;

  var result_13091018 = null;

    switch (t_13091017.t) {
    case 0:
      var Tmp2 = t_13091017;
      if (ConstSet51[Tmp2.t]===undefined) { raiseFieldError(makeNimstrLit("\'id\' is not accessible using discriminant \'t\' of type \'T\'")); }
      Tmp1 = Tmp2.id;
      break;
    case 1:
      var fmtRes_13091020 = [mnewString(0)];
      fmtRes_13091020[0].push.apply(fmtRes_13091020[0], makeNimstrLit("(|"));;
      var Tmp3 = t_13091017;
      if (ConstSet52[Tmp3.t]===undefined) { raiseFieldError(makeNimstrLit("\'param\' is not accessible using discriminant \'t\' of type \'T\'")); }
      add_1357211(fmtRes_13091020, 0, Tmp3.param);
      fmtRes_13091020[0].push.apply(fmtRes_13091020[0], makeNimstrLit("."));;
      var Tmp4 = t_13091017;
      if (ConstSet53[Tmp4.t]===undefined) { raiseFieldError(makeNimstrLit("\'body\' is not accessible using discriminant \'t\' of type \'T\'")); }
      add_1357211(fmtRes_13091020, 0, pprint_13091015(Tmp4.body));
      fmtRes_13091020[0].push.apply(fmtRes_13091020[0], makeNimstrLit(")"));;
      Tmp1 = toJSStr(fmtRes_13091020[0]);
      break;
    case 2:
      var fmtRes_13105002 = [mnewString(0)];
      fmtRes_13105002[0].push.apply(fmtRes_13105002[0], makeNimstrLit("("));;
      var Tmp5 = t_13091017;
      if (ConstSet54[Tmp5.t]===undefined) { raiseFieldError(makeNimstrLit("\'t1\' is not accessible using discriminant \'t\' of type \'T\'")); }
      add_1357211(fmtRes_13105002, 0, pprint_13091015(Tmp5.t1));
      fmtRes_13105002[0].push.apply(fmtRes_13105002[0], makeNimstrLit(" "));;
      var Tmp6 = t_13091017;
      if (ConstSet55[Tmp6.t]===undefined) { raiseFieldError(makeNimstrLit("\'t2\' is not accessible using discriminant \'t\' of type \'T\'")); }
      add_1357211(fmtRes_13105002, 0, pprint_13091015(Tmp6.t2));
      fmtRes_13105002[0].push.apply(fmtRes_13105002[0], makeNimstrLit(")"));;
      Tmp1 = toJSStr(fmtRes_13105002[0]);
      break;
    case 3:
      var fmtRes_13120002 = [mnewString(0)];
      var Tmp7 = t_13091017;
      if (ConstSet56[Tmp7.t]===undefined) { raiseFieldError(makeNimstrLit("\'name\' is not accessible using discriminant \'t\' of type \'T\'")); }
      add_1357211(fmtRes_13120002, 0, Tmp7.name);
      fmtRes_13120002[0].push.apply(fmtRes_13120002[0], makeNimstrLit(" := "));;
      var Tmp8 = t_13091017;
      if (ConstSet57[Tmp8.t]===undefined) { raiseFieldError(makeNimstrLit("\'val\' is not accessible using discriminant \'t\' of type \'T\'")); }
      add_1357211(fmtRes_13120002, 0, pprint_13091015(Tmp8.val));
      Tmp1 = toJSStr(fmtRes_13120002[0]);
      break;
    case 4:
      Tmp1 = "";
      break;
    }
    result_13091018 = Tmp1;

  return result_13091018;

}
function run(inp_13376016) {
  var result_13376017 = null;

    var resultHEX60gensym0_13380417 = [];
    L1: do {
      var xHEX60gensym0_13380418 = 0;
      var i_13380446 = 0;
      var L_13380447 = (inp_13376016).length;
      L2: do {
          L3: while (true) {
          if (!(i_13380446 < L_13380447)) break L3;
            xHEX60gensym0_13380418 = inp_13376016.charCodeAt(chckIndx(i_13380446, 0, (inp_13376016).length-1));
            resultHEX60gensym0_13380417.push(xHEX60gensym0_13380418);;
            i_13380446 = addInt(i_13380446, 1);
          }
      } while(false);
    } while(false);
    var tokens_13380427 = tokenize_12622046(resultHEX60gensym0_13380417);
    var ast_13380428 = parse_12855525(tokens_13380427);
    var res_13380429 = eval_13240015(ast_13380428);
    var print_13380430 = pprint_13091015(res_13380429);
    result_13376017 = print_13380430;

  return result_13376017;

}
